// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"entcdemo/ent/predicate"
	"entcdemo/ent/reply"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeReply = "Reply"
)

// ReplyMutation represents an operation that mutates the Reply nodes in the graph.
type ReplyMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	message       *string
	ats           *string
	ip            *int64
	addip         *int64
	plat          *int8
	addplat       *int8
	device        *string
	version       *string
	ctime         *time.Time
	mtime         *time.Time
	topics        *string
	addr          *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Reply, error)
	predicates    []predicate.Reply
}

var _ ent.Mutation = (*ReplyMutation)(nil)

// replyOption allows management of the mutation configuration using functional options.
type replyOption func(*ReplyMutation)

// newReplyMutation creates new mutation for the Reply entity.
func newReplyMutation(c config, op Op, opts ...replyOption) *ReplyMutation {
	m := &ReplyMutation{
		config:        c,
		op:            op,
		typ:           TypeReply,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withReplyID sets the ID field of the mutation.
func withReplyID(id int64) replyOption {
	return func(m *ReplyMutation) {
		var (
			err   error
			once  sync.Once
			value *Reply
		)
		m.oldValue = func(ctx context.Context) (*Reply, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Reply.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withReply sets the old Reply of the mutation.
func withReply(node *Reply) replyOption {
	return func(m *ReplyMutation) {
		m.oldValue = func(context.Context) (*Reply, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ReplyMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ReplyMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Reply entities.
func (m *ReplyMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ReplyMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ReplyMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Reply.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetMessage sets the "message" field.
func (m *ReplyMutation) SetMessage(s string) {
	m.message = &s
}

// Message returns the value of the "message" field in the mutation.
func (m *ReplyMutation) Message() (r string, exists bool) {
	v := m.message
	if v == nil {
		return
	}
	return *v, true
}

// OldMessage returns the old "message" field's value of the Reply entity.
// If the Reply object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReplyMutation) OldMessage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMessage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMessage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMessage: %w", err)
	}
	return oldValue.Message, nil
}

// ResetMessage resets all changes to the "message" field.
func (m *ReplyMutation) ResetMessage() {
	m.message = nil
}

// SetAts sets the "ats" field.
func (m *ReplyMutation) SetAts(s string) {
	m.ats = &s
}

// Ats returns the value of the "ats" field in the mutation.
func (m *ReplyMutation) Ats() (r string, exists bool) {
	v := m.ats
	if v == nil {
		return
	}
	return *v, true
}

// OldAts returns the old "ats" field's value of the Reply entity.
// If the Reply object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReplyMutation) OldAts(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAts is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAts requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAts: %w", err)
	}
	return oldValue.Ats, nil
}

// ResetAts resets all changes to the "ats" field.
func (m *ReplyMutation) ResetAts() {
	m.ats = nil
}

// SetIP sets the "ip" field.
func (m *ReplyMutation) SetIP(i int64) {
	m.ip = &i
	m.addip = nil
}

// IP returns the value of the "ip" field in the mutation.
func (m *ReplyMutation) IP() (r int64, exists bool) {
	v := m.ip
	if v == nil {
		return
	}
	return *v, true
}

// OldIP returns the old "ip" field's value of the Reply entity.
// If the Reply object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReplyMutation) OldIP(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIP is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIP requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIP: %w", err)
	}
	return oldValue.IP, nil
}

// AddIP adds i to the "ip" field.
func (m *ReplyMutation) AddIP(i int64) {
	if m.addip != nil {
		*m.addip += i
	} else {
		m.addip = &i
	}
}

// AddedIP returns the value that was added to the "ip" field in this mutation.
func (m *ReplyMutation) AddedIP() (r int64, exists bool) {
	v := m.addip
	if v == nil {
		return
	}
	return *v, true
}

// ResetIP resets all changes to the "ip" field.
func (m *ReplyMutation) ResetIP() {
	m.ip = nil
	m.addip = nil
}

// SetPlat sets the "plat" field.
func (m *ReplyMutation) SetPlat(i int8) {
	m.plat = &i
	m.addplat = nil
}

// Plat returns the value of the "plat" field in the mutation.
func (m *ReplyMutation) Plat() (r int8, exists bool) {
	v := m.plat
	if v == nil {
		return
	}
	return *v, true
}

// OldPlat returns the old "plat" field's value of the Reply entity.
// If the Reply object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReplyMutation) OldPlat(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlat is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlat requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlat: %w", err)
	}
	return oldValue.Plat, nil
}

// AddPlat adds i to the "plat" field.
func (m *ReplyMutation) AddPlat(i int8) {
	if m.addplat != nil {
		*m.addplat += i
	} else {
		m.addplat = &i
	}
}

// AddedPlat returns the value that was added to the "plat" field in this mutation.
func (m *ReplyMutation) AddedPlat() (r int8, exists bool) {
	v := m.addplat
	if v == nil {
		return
	}
	return *v, true
}

// ResetPlat resets all changes to the "plat" field.
func (m *ReplyMutation) ResetPlat() {
	m.plat = nil
	m.addplat = nil
}

// SetDevice sets the "device" field.
func (m *ReplyMutation) SetDevice(s string) {
	m.device = &s
}

// Device returns the value of the "device" field in the mutation.
func (m *ReplyMutation) Device() (r string, exists bool) {
	v := m.device
	if v == nil {
		return
	}
	return *v, true
}

// OldDevice returns the old "device" field's value of the Reply entity.
// If the Reply object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReplyMutation) OldDevice(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDevice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDevice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDevice: %w", err)
	}
	return oldValue.Device, nil
}

// ResetDevice resets all changes to the "device" field.
func (m *ReplyMutation) ResetDevice() {
	m.device = nil
}

// SetVersion sets the "version" field.
func (m *ReplyMutation) SetVersion(s string) {
	m.version = &s
}

// Version returns the value of the "version" field in the mutation.
func (m *ReplyMutation) Version() (r string, exists bool) {
	v := m.version
	if v == nil {
		return
	}
	return *v, true
}

// OldVersion returns the old "version" field's value of the Reply entity.
// If the Reply object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReplyMutation) OldVersion(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVersion: %w", err)
	}
	return oldValue.Version, nil
}

// ResetVersion resets all changes to the "version" field.
func (m *ReplyMutation) ResetVersion() {
	m.version = nil
}

// SetCtime sets the "ctime" field.
func (m *ReplyMutation) SetCtime(t time.Time) {
	m.ctime = &t
}

// Ctime returns the value of the "ctime" field in the mutation.
func (m *ReplyMutation) Ctime() (r time.Time, exists bool) {
	v := m.ctime
	if v == nil {
		return
	}
	return *v, true
}

// OldCtime returns the old "ctime" field's value of the Reply entity.
// If the Reply object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReplyMutation) OldCtime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCtime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCtime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCtime: %w", err)
	}
	return oldValue.Ctime, nil
}

// ResetCtime resets all changes to the "ctime" field.
func (m *ReplyMutation) ResetCtime() {
	m.ctime = nil
}

// SetMtime sets the "mtime" field.
func (m *ReplyMutation) SetMtime(t time.Time) {
	m.mtime = &t
}

// Mtime returns the value of the "mtime" field in the mutation.
func (m *ReplyMutation) Mtime() (r time.Time, exists bool) {
	v := m.mtime
	if v == nil {
		return
	}
	return *v, true
}

// OldMtime returns the old "mtime" field's value of the Reply entity.
// If the Reply object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReplyMutation) OldMtime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMtime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMtime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMtime: %w", err)
	}
	return oldValue.Mtime, nil
}

// ResetMtime resets all changes to the "mtime" field.
func (m *ReplyMutation) ResetMtime() {
	m.mtime = nil
}

// SetTopics sets the "topics" field.
func (m *ReplyMutation) SetTopics(s string) {
	m.topics = &s
}

// Topics returns the value of the "topics" field in the mutation.
func (m *ReplyMutation) Topics() (r string, exists bool) {
	v := m.topics
	if v == nil {
		return
	}
	return *v, true
}

// OldTopics returns the old "topics" field's value of the Reply entity.
// If the Reply object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReplyMutation) OldTopics(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTopics is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTopics requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTopics: %w", err)
	}
	return oldValue.Topics, nil
}

// ResetTopics resets all changes to the "topics" field.
func (m *ReplyMutation) ResetTopics() {
	m.topics = nil
}

// SetAddr sets the "addr" field.
func (m *ReplyMutation) SetAddr(s string) {
	m.addr = &s
}

// Addr returns the value of the "addr" field in the mutation.
func (m *ReplyMutation) Addr() (r string, exists bool) {
	v := m.addr
	if v == nil {
		return
	}
	return *v, true
}

// OldAddr returns the old "addr" field's value of the Reply entity.
// If the Reply object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ReplyMutation) OldAddr(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAddr is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAddr requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAddr: %w", err)
	}
	return oldValue.Addr, nil
}

// ResetAddr resets all changes to the "addr" field.
func (m *ReplyMutation) ResetAddr() {
	m.addr = nil
}

// Where appends a list predicates to the ReplyMutation builder.
func (m *ReplyMutation) Where(ps ...predicate.Reply) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ReplyMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ReplyMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Reply, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ReplyMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ReplyMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Reply).
func (m *ReplyMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ReplyMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.message != nil {
		fields = append(fields, reply.FieldMessage)
	}
	if m.ats != nil {
		fields = append(fields, reply.FieldAts)
	}
	if m.ip != nil {
		fields = append(fields, reply.FieldIP)
	}
	if m.plat != nil {
		fields = append(fields, reply.FieldPlat)
	}
	if m.device != nil {
		fields = append(fields, reply.FieldDevice)
	}
	if m.version != nil {
		fields = append(fields, reply.FieldVersion)
	}
	if m.ctime != nil {
		fields = append(fields, reply.FieldCtime)
	}
	if m.mtime != nil {
		fields = append(fields, reply.FieldMtime)
	}
	if m.topics != nil {
		fields = append(fields, reply.FieldTopics)
	}
	if m.addr != nil {
		fields = append(fields, reply.FieldAddr)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ReplyMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case reply.FieldMessage:
		return m.Message()
	case reply.FieldAts:
		return m.Ats()
	case reply.FieldIP:
		return m.IP()
	case reply.FieldPlat:
		return m.Plat()
	case reply.FieldDevice:
		return m.Device()
	case reply.FieldVersion:
		return m.Version()
	case reply.FieldCtime:
		return m.Ctime()
	case reply.FieldMtime:
		return m.Mtime()
	case reply.FieldTopics:
		return m.Topics()
	case reply.FieldAddr:
		return m.Addr()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ReplyMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case reply.FieldMessage:
		return m.OldMessage(ctx)
	case reply.FieldAts:
		return m.OldAts(ctx)
	case reply.FieldIP:
		return m.OldIP(ctx)
	case reply.FieldPlat:
		return m.OldPlat(ctx)
	case reply.FieldDevice:
		return m.OldDevice(ctx)
	case reply.FieldVersion:
		return m.OldVersion(ctx)
	case reply.FieldCtime:
		return m.OldCtime(ctx)
	case reply.FieldMtime:
		return m.OldMtime(ctx)
	case reply.FieldTopics:
		return m.OldTopics(ctx)
	case reply.FieldAddr:
		return m.OldAddr(ctx)
	}
	return nil, fmt.Errorf("unknown Reply field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ReplyMutation) SetField(name string, value ent.Value) error {
	switch name {
	case reply.FieldMessage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMessage(v)
		return nil
	case reply.FieldAts:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAts(v)
		return nil
	case reply.FieldIP:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIP(v)
		return nil
	case reply.FieldPlat:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlat(v)
		return nil
	case reply.FieldDevice:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDevice(v)
		return nil
	case reply.FieldVersion:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVersion(v)
		return nil
	case reply.FieldCtime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCtime(v)
		return nil
	case reply.FieldMtime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMtime(v)
		return nil
	case reply.FieldTopics:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTopics(v)
		return nil
	case reply.FieldAddr:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddr(v)
		return nil
	}
	return fmt.Errorf("unknown Reply field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ReplyMutation) AddedFields() []string {
	var fields []string
	if m.addip != nil {
		fields = append(fields, reply.FieldIP)
	}
	if m.addplat != nil {
		fields = append(fields, reply.FieldPlat)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ReplyMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case reply.FieldIP:
		return m.AddedIP()
	case reply.FieldPlat:
		return m.AddedPlat()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ReplyMutation) AddField(name string, value ent.Value) error {
	switch name {
	case reply.FieldIP:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddIP(v)
		return nil
	case reply.FieldPlat:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPlat(v)
		return nil
	}
	return fmt.Errorf("unknown Reply numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ReplyMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ReplyMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ReplyMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Reply nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ReplyMutation) ResetField(name string) error {
	switch name {
	case reply.FieldMessage:
		m.ResetMessage()
		return nil
	case reply.FieldAts:
		m.ResetAts()
		return nil
	case reply.FieldIP:
		m.ResetIP()
		return nil
	case reply.FieldPlat:
		m.ResetPlat()
		return nil
	case reply.FieldDevice:
		m.ResetDevice()
		return nil
	case reply.FieldVersion:
		m.ResetVersion()
		return nil
	case reply.FieldCtime:
		m.ResetCtime()
		return nil
	case reply.FieldMtime:
		m.ResetMtime()
		return nil
	case reply.FieldTopics:
		m.ResetTopics()
		return nil
	case reply.FieldAddr:
		m.ResetAddr()
		return nil
	}
	return fmt.Errorf("unknown Reply field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ReplyMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ReplyMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ReplyMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ReplyMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ReplyMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ReplyMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ReplyMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Reply unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ReplyMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Reply edge %s", name)
}
