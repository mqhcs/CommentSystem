// Code generated by ent, DO NOT EDIT.

package ent

import (
	"comment-main/app/comment-service/internal/data/ent/replyindex"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ReplyIndexCreate is the builder for creating a ReplyIndex entity.
type ReplyIndexCreate struct {
	config
	mutation *ReplyIndexMutation
	hooks    []Hook
}

// SetOid sets the "oid" field.
func (ric *ReplyIndexCreate) SetOid(i int64) *ReplyIndexCreate {
	ric.mutation.SetOid(i)
	return ric
}

// SetType sets the "type" field.
func (ric *ReplyIndexCreate) SetType(i int8) *ReplyIndexCreate {
	ric.mutation.SetType(i)
	return ric
}

// SetMid sets the "mid" field.
func (ric *ReplyIndexCreate) SetMid(i int64) *ReplyIndexCreate {
	ric.mutation.SetMid(i)
	return ric
}

// SetRoot sets the "root" field.
func (ric *ReplyIndexCreate) SetRoot(i int64) *ReplyIndexCreate {
	ric.mutation.SetRoot(i)
	return ric
}

// SetParent sets the "parent" field.
func (ric *ReplyIndexCreate) SetParent(i int64) *ReplyIndexCreate {
	ric.mutation.SetParent(i)
	return ric
}

// SetCount sets the "count" field.
func (ric *ReplyIndexCreate) SetCount(i int32) *ReplyIndexCreate {
	ric.mutation.SetCount(i)
	return ric
}

// SetRcount sets the "rcount" field.
func (ric *ReplyIndexCreate) SetRcount(i int32) *ReplyIndexCreate {
	ric.mutation.SetRcount(i)
	return ric
}

// SetAcount sets the "acount" field.
func (ric *ReplyIndexCreate) SetAcount(i int32) *ReplyIndexCreate {
	ric.mutation.SetAcount(i)
	return ric
}

// SetLikes sets the "likes" field.
func (ric *ReplyIndexCreate) SetLikes(i int32) *ReplyIndexCreate {
	ric.mutation.SetLikes(i)
	return ric
}

// SetHates sets the "hates" field.
func (ric *ReplyIndexCreate) SetHates(i int32) *ReplyIndexCreate {
	ric.mutation.SetHates(i)
	return ric
}

// SetReportCount sets the "report_count" field.
func (ric *ReplyIndexCreate) SetReportCount(i int32) *ReplyIndexCreate {
	ric.mutation.SetReportCount(i)
	return ric
}

// SetState sets the "state" field.
func (ric *ReplyIndexCreate) SetState(i int8) *ReplyIndexCreate {
	ric.mutation.SetState(i)
	return ric
}

// SetCtime sets the "ctime" field.
func (ric *ReplyIndexCreate) SetCtime(t time.Time) *ReplyIndexCreate {
	ric.mutation.SetCtime(t)
	return ric
}

// SetNillableCtime sets the "ctime" field if the given value is not nil.
func (ric *ReplyIndexCreate) SetNillableCtime(t *time.Time) *ReplyIndexCreate {
	if t != nil {
		ric.SetCtime(*t)
	}
	return ric
}

// SetMtime sets the "mtime" field.
func (ric *ReplyIndexCreate) SetMtime(t time.Time) *ReplyIndexCreate {
	ric.mutation.SetMtime(t)
	return ric
}

// SetNillableMtime sets the "mtime" field if the given value is not nil.
func (ric *ReplyIndexCreate) SetNillableMtime(t *time.Time) *ReplyIndexCreate {
	if t != nil {
		ric.SetMtime(*t)
	}
	return ric
}

// SetID sets the "id" field.
func (ric *ReplyIndexCreate) SetID(i int64) *ReplyIndexCreate {
	ric.mutation.SetID(i)
	return ric
}

// Mutation returns the ReplyIndexMutation object of the builder.
func (ric *ReplyIndexCreate) Mutation() *ReplyIndexMutation {
	return ric.mutation
}

// Save creates the ReplyIndex in the database.
func (ric *ReplyIndexCreate) Save(ctx context.Context) (*ReplyIndex, error) {
	ric.defaults()
	return withHooks(ctx, ric.sqlSave, ric.mutation, ric.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ric *ReplyIndexCreate) SaveX(ctx context.Context) *ReplyIndex {
	v, err := ric.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ric *ReplyIndexCreate) Exec(ctx context.Context) error {
	_, err := ric.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ric *ReplyIndexCreate) ExecX(ctx context.Context) {
	if err := ric.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ric *ReplyIndexCreate) defaults() {
	if _, ok := ric.mutation.Ctime(); !ok {
		v := replyindex.DefaultCtime()
		ric.mutation.SetCtime(v)
	}
	if _, ok := ric.mutation.Mtime(); !ok {
		v := replyindex.DefaultMtime()
		ric.mutation.SetMtime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ric *ReplyIndexCreate) check() error {
	if _, ok := ric.mutation.Oid(); !ok {
		return &ValidationError{Name: "oid", err: errors.New(`ent: missing required field "ReplyIndex.oid"`)}
	}
	if _, ok := ric.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "ReplyIndex.type"`)}
	}
	if _, ok := ric.mutation.Mid(); !ok {
		return &ValidationError{Name: "mid", err: errors.New(`ent: missing required field "ReplyIndex.mid"`)}
	}
	if _, ok := ric.mutation.Root(); !ok {
		return &ValidationError{Name: "root", err: errors.New(`ent: missing required field "ReplyIndex.root"`)}
	}
	if _, ok := ric.mutation.Parent(); !ok {
		return &ValidationError{Name: "parent", err: errors.New(`ent: missing required field "ReplyIndex.parent"`)}
	}
	if _, ok := ric.mutation.Count(); !ok {
		return &ValidationError{Name: "count", err: errors.New(`ent: missing required field "ReplyIndex.count"`)}
	}
	if _, ok := ric.mutation.Rcount(); !ok {
		return &ValidationError{Name: "rcount", err: errors.New(`ent: missing required field "ReplyIndex.rcount"`)}
	}
	if _, ok := ric.mutation.Acount(); !ok {
		return &ValidationError{Name: "acount", err: errors.New(`ent: missing required field "ReplyIndex.acount"`)}
	}
	if _, ok := ric.mutation.Likes(); !ok {
		return &ValidationError{Name: "likes", err: errors.New(`ent: missing required field "ReplyIndex.likes"`)}
	}
	if _, ok := ric.mutation.Hates(); !ok {
		return &ValidationError{Name: "hates", err: errors.New(`ent: missing required field "ReplyIndex.hates"`)}
	}
	if _, ok := ric.mutation.ReportCount(); !ok {
		return &ValidationError{Name: "report_count", err: errors.New(`ent: missing required field "ReplyIndex.report_count"`)}
	}
	if _, ok := ric.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "ReplyIndex.state"`)}
	}
	if _, ok := ric.mutation.Ctime(); !ok {
		return &ValidationError{Name: "ctime", err: errors.New(`ent: missing required field "ReplyIndex.ctime"`)}
	}
	if _, ok := ric.mutation.Mtime(); !ok {
		return &ValidationError{Name: "mtime", err: errors.New(`ent: missing required field "ReplyIndex.mtime"`)}
	}
	return nil
}

func (ric *ReplyIndexCreate) sqlSave(ctx context.Context) (*ReplyIndex, error) {
	if err := ric.check(); err != nil {
		return nil, err
	}
	_node, _spec := ric.createSpec()
	if err := sqlgraph.CreateNode(ctx, ric.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	ric.mutation.id = &_node.ID
	ric.mutation.done = true
	return _node, nil
}

func (ric *ReplyIndexCreate) createSpec() (*ReplyIndex, *sqlgraph.CreateSpec) {
	var (
		_node = &ReplyIndex{config: ric.config}
		_spec = sqlgraph.NewCreateSpec(replyindex.Table, sqlgraph.NewFieldSpec(replyindex.FieldID, field.TypeInt64))
	)
	if id, ok := ric.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ric.mutation.Oid(); ok {
		_spec.SetField(replyindex.FieldOid, field.TypeInt64, value)
		_node.Oid = value
	}
	if value, ok := ric.mutation.GetType(); ok {
		_spec.SetField(replyindex.FieldType, field.TypeInt8, value)
		_node.Type = value
	}
	if value, ok := ric.mutation.Mid(); ok {
		_spec.SetField(replyindex.FieldMid, field.TypeInt64, value)
		_node.Mid = value
	}
	if value, ok := ric.mutation.Root(); ok {
		_spec.SetField(replyindex.FieldRoot, field.TypeInt64, value)
		_node.Root = value
	}
	if value, ok := ric.mutation.Parent(); ok {
		_spec.SetField(replyindex.FieldParent, field.TypeInt64, value)
		_node.Parent = value
	}
	if value, ok := ric.mutation.Count(); ok {
		_spec.SetField(replyindex.FieldCount, field.TypeInt32, value)
		_node.Count = value
	}
	if value, ok := ric.mutation.Rcount(); ok {
		_spec.SetField(replyindex.FieldRcount, field.TypeInt32, value)
		_node.Rcount = value
	}
	if value, ok := ric.mutation.Acount(); ok {
		_spec.SetField(replyindex.FieldAcount, field.TypeInt32, value)
		_node.Acount = value
	}
	if value, ok := ric.mutation.Likes(); ok {
		_spec.SetField(replyindex.FieldLikes, field.TypeInt32, value)
		_node.Likes = value
	}
	if value, ok := ric.mutation.Hates(); ok {
		_spec.SetField(replyindex.FieldHates, field.TypeInt32, value)
		_node.Hates = value
	}
	if value, ok := ric.mutation.ReportCount(); ok {
		_spec.SetField(replyindex.FieldReportCount, field.TypeInt32, value)
		_node.ReportCount = value
	}
	if value, ok := ric.mutation.State(); ok {
		_spec.SetField(replyindex.FieldState, field.TypeInt8, value)
		_node.State = value
	}
	if value, ok := ric.mutation.Ctime(); ok {
		_spec.SetField(replyindex.FieldCtime, field.TypeTime, value)
		_node.Ctime = value
	}
	if value, ok := ric.mutation.Mtime(); ok {
		_spec.SetField(replyindex.FieldMtime, field.TypeTime, value)
		_node.Mtime = value
	}
	return _node, _spec
}

// ReplyIndexCreateBulk is the builder for creating many ReplyIndex entities in bulk.
type ReplyIndexCreateBulk struct {
	config
	builders []*ReplyIndexCreate
}

// Save creates the ReplyIndex entities in the database.
func (ricb *ReplyIndexCreateBulk) Save(ctx context.Context) ([]*ReplyIndex, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ricb.builders))
	nodes := make([]*ReplyIndex, len(ricb.builders))
	mutators := make([]Mutator, len(ricb.builders))
	for i := range ricb.builders {
		func(i int, root context.Context) {
			builder := ricb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ReplyIndexMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ricb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ricb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ricb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ricb *ReplyIndexCreateBulk) SaveX(ctx context.Context) []*ReplyIndex {
	v, err := ricb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ricb *ReplyIndexCreateBulk) Exec(ctx context.Context) error {
	_, err := ricb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ricb *ReplyIndexCreateBulk) ExecX(ctx context.Context) {
	if err := ricb.Exec(ctx); err != nil {
		panic(err)
	}
}
