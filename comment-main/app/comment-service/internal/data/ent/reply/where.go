// Code generated by ent, DO NOT EDIT.

package reply

import (
	"comment-main/app/comment-service/internal/data/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Reply {
	return predicate.Reply(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Reply {
	return predicate.Reply(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Reply {
	return predicate.Reply(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Reply {
	return predicate.Reply(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Reply {
	return predicate.Reply(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Reply {
	return predicate.Reply(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Reply {
	return predicate.Reply(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Reply {
	return predicate.Reply(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Reply {
	return predicate.Reply(sql.FieldLTE(FieldID, id))
}

// Rpid applies equality check predicate on the "rpid" field. It's identical to RpidEQ.
func Rpid(v int64) predicate.Reply {
	return predicate.Reply(sql.FieldEQ(FieldRpid, v))
}

// Message applies equality check predicate on the "message" field. It's identical to MessageEQ.
func Message(v string) predicate.Reply {
	return predicate.Reply(sql.FieldEQ(FieldMessage, v))
}

// Ats applies equality check predicate on the "ats" field. It's identical to AtsEQ.
func Ats(v string) predicate.Reply {
	return predicate.Reply(sql.FieldEQ(FieldAts, v))
}

// IP applies equality check predicate on the "ip" field. It's identical to IPEQ.
func IP(v int64) predicate.Reply {
	return predicate.Reply(sql.FieldEQ(FieldIP, v))
}

// Plat applies equality check predicate on the "plat" field. It's identical to PlatEQ.
func Plat(v int8) predicate.Reply {
	return predicate.Reply(sql.FieldEQ(FieldPlat, v))
}

// Device applies equality check predicate on the "device" field. It's identical to DeviceEQ.
func Device(v string) predicate.Reply {
	return predicate.Reply(sql.FieldEQ(FieldDevice, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v string) predicate.Reply {
	return predicate.Reply(sql.FieldEQ(FieldVersion, v))
}

// Ctime applies equality check predicate on the "ctime" field. It's identical to CtimeEQ.
func Ctime(v time.Time) predicate.Reply {
	return predicate.Reply(sql.FieldEQ(FieldCtime, v))
}

// Mtime applies equality check predicate on the "mtime" field. It's identical to MtimeEQ.
func Mtime(v time.Time) predicate.Reply {
	return predicate.Reply(sql.FieldEQ(FieldMtime, v))
}

// Topics applies equality check predicate on the "topics" field. It's identical to TopicsEQ.
func Topics(v string) predicate.Reply {
	return predicate.Reply(sql.FieldEQ(FieldTopics, v))
}

// Addr applies equality check predicate on the "addr" field. It's identical to AddrEQ.
func Addr(v string) predicate.Reply {
	return predicate.Reply(sql.FieldEQ(FieldAddr, v))
}

// RpidEQ applies the EQ predicate on the "rpid" field.
func RpidEQ(v int64) predicate.Reply {
	return predicate.Reply(sql.FieldEQ(FieldRpid, v))
}

// RpidNEQ applies the NEQ predicate on the "rpid" field.
func RpidNEQ(v int64) predicate.Reply {
	return predicate.Reply(sql.FieldNEQ(FieldRpid, v))
}

// RpidIn applies the In predicate on the "rpid" field.
func RpidIn(vs ...int64) predicate.Reply {
	return predicate.Reply(sql.FieldIn(FieldRpid, vs...))
}

// RpidNotIn applies the NotIn predicate on the "rpid" field.
func RpidNotIn(vs ...int64) predicate.Reply {
	return predicate.Reply(sql.FieldNotIn(FieldRpid, vs...))
}

// RpidGT applies the GT predicate on the "rpid" field.
func RpidGT(v int64) predicate.Reply {
	return predicate.Reply(sql.FieldGT(FieldRpid, v))
}

// RpidGTE applies the GTE predicate on the "rpid" field.
func RpidGTE(v int64) predicate.Reply {
	return predicate.Reply(sql.FieldGTE(FieldRpid, v))
}

// RpidLT applies the LT predicate on the "rpid" field.
func RpidLT(v int64) predicate.Reply {
	return predicate.Reply(sql.FieldLT(FieldRpid, v))
}

// RpidLTE applies the LTE predicate on the "rpid" field.
func RpidLTE(v int64) predicate.Reply {
	return predicate.Reply(sql.FieldLTE(FieldRpid, v))
}

// MessageEQ applies the EQ predicate on the "message" field.
func MessageEQ(v string) predicate.Reply {
	return predicate.Reply(sql.FieldEQ(FieldMessage, v))
}

// MessageNEQ applies the NEQ predicate on the "message" field.
func MessageNEQ(v string) predicate.Reply {
	return predicate.Reply(sql.FieldNEQ(FieldMessage, v))
}

// MessageIn applies the In predicate on the "message" field.
func MessageIn(vs ...string) predicate.Reply {
	return predicate.Reply(sql.FieldIn(FieldMessage, vs...))
}

// MessageNotIn applies the NotIn predicate on the "message" field.
func MessageNotIn(vs ...string) predicate.Reply {
	return predicate.Reply(sql.FieldNotIn(FieldMessage, vs...))
}

// MessageGT applies the GT predicate on the "message" field.
func MessageGT(v string) predicate.Reply {
	return predicate.Reply(sql.FieldGT(FieldMessage, v))
}

// MessageGTE applies the GTE predicate on the "message" field.
func MessageGTE(v string) predicate.Reply {
	return predicate.Reply(sql.FieldGTE(FieldMessage, v))
}

// MessageLT applies the LT predicate on the "message" field.
func MessageLT(v string) predicate.Reply {
	return predicate.Reply(sql.FieldLT(FieldMessage, v))
}

// MessageLTE applies the LTE predicate on the "message" field.
func MessageLTE(v string) predicate.Reply {
	return predicate.Reply(sql.FieldLTE(FieldMessage, v))
}

// MessageContains applies the Contains predicate on the "message" field.
func MessageContains(v string) predicate.Reply {
	return predicate.Reply(sql.FieldContains(FieldMessage, v))
}

// MessageHasPrefix applies the HasPrefix predicate on the "message" field.
func MessageHasPrefix(v string) predicate.Reply {
	return predicate.Reply(sql.FieldHasPrefix(FieldMessage, v))
}

// MessageHasSuffix applies the HasSuffix predicate on the "message" field.
func MessageHasSuffix(v string) predicate.Reply {
	return predicate.Reply(sql.FieldHasSuffix(FieldMessage, v))
}

// MessageEqualFold applies the EqualFold predicate on the "message" field.
func MessageEqualFold(v string) predicate.Reply {
	return predicate.Reply(sql.FieldEqualFold(FieldMessage, v))
}

// MessageContainsFold applies the ContainsFold predicate on the "message" field.
func MessageContainsFold(v string) predicate.Reply {
	return predicate.Reply(sql.FieldContainsFold(FieldMessage, v))
}

// AtsEQ applies the EQ predicate on the "ats" field.
func AtsEQ(v string) predicate.Reply {
	return predicate.Reply(sql.FieldEQ(FieldAts, v))
}

// AtsNEQ applies the NEQ predicate on the "ats" field.
func AtsNEQ(v string) predicate.Reply {
	return predicate.Reply(sql.FieldNEQ(FieldAts, v))
}

// AtsIn applies the In predicate on the "ats" field.
func AtsIn(vs ...string) predicate.Reply {
	return predicate.Reply(sql.FieldIn(FieldAts, vs...))
}

// AtsNotIn applies the NotIn predicate on the "ats" field.
func AtsNotIn(vs ...string) predicate.Reply {
	return predicate.Reply(sql.FieldNotIn(FieldAts, vs...))
}

// AtsGT applies the GT predicate on the "ats" field.
func AtsGT(v string) predicate.Reply {
	return predicate.Reply(sql.FieldGT(FieldAts, v))
}

// AtsGTE applies the GTE predicate on the "ats" field.
func AtsGTE(v string) predicate.Reply {
	return predicate.Reply(sql.FieldGTE(FieldAts, v))
}

// AtsLT applies the LT predicate on the "ats" field.
func AtsLT(v string) predicate.Reply {
	return predicate.Reply(sql.FieldLT(FieldAts, v))
}

// AtsLTE applies the LTE predicate on the "ats" field.
func AtsLTE(v string) predicate.Reply {
	return predicate.Reply(sql.FieldLTE(FieldAts, v))
}

// AtsContains applies the Contains predicate on the "ats" field.
func AtsContains(v string) predicate.Reply {
	return predicate.Reply(sql.FieldContains(FieldAts, v))
}

// AtsHasPrefix applies the HasPrefix predicate on the "ats" field.
func AtsHasPrefix(v string) predicate.Reply {
	return predicate.Reply(sql.FieldHasPrefix(FieldAts, v))
}

// AtsHasSuffix applies the HasSuffix predicate on the "ats" field.
func AtsHasSuffix(v string) predicate.Reply {
	return predicate.Reply(sql.FieldHasSuffix(FieldAts, v))
}

// AtsEqualFold applies the EqualFold predicate on the "ats" field.
func AtsEqualFold(v string) predicate.Reply {
	return predicate.Reply(sql.FieldEqualFold(FieldAts, v))
}

// AtsContainsFold applies the ContainsFold predicate on the "ats" field.
func AtsContainsFold(v string) predicate.Reply {
	return predicate.Reply(sql.FieldContainsFold(FieldAts, v))
}

// IPEQ applies the EQ predicate on the "ip" field.
func IPEQ(v int64) predicate.Reply {
	return predicate.Reply(sql.FieldEQ(FieldIP, v))
}

// IPNEQ applies the NEQ predicate on the "ip" field.
func IPNEQ(v int64) predicate.Reply {
	return predicate.Reply(sql.FieldNEQ(FieldIP, v))
}

// IPIn applies the In predicate on the "ip" field.
func IPIn(vs ...int64) predicate.Reply {
	return predicate.Reply(sql.FieldIn(FieldIP, vs...))
}

// IPNotIn applies the NotIn predicate on the "ip" field.
func IPNotIn(vs ...int64) predicate.Reply {
	return predicate.Reply(sql.FieldNotIn(FieldIP, vs...))
}

// IPGT applies the GT predicate on the "ip" field.
func IPGT(v int64) predicate.Reply {
	return predicate.Reply(sql.FieldGT(FieldIP, v))
}

// IPGTE applies the GTE predicate on the "ip" field.
func IPGTE(v int64) predicate.Reply {
	return predicate.Reply(sql.FieldGTE(FieldIP, v))
}

// IPLT applies the LT predicate on the "ip" field.
func IPLT(v int64) predicate.Reply {
	return predicate.Reply(sql.FieldLT(FieldIP, v))
}

// IPLTE applies the LTE predicate on the "ip" field.
func IPLTE(v int64) predicate.Reply {
	return predicate.Reply(sql.FieldLTE(FieldIP, v))
}

// PlatEQ applies the EQ predicate on the "plat" field.
func PlatEQ(v int8) predicate.Reply {
	return predicate.Reply(sql.FieldEQ(FieldPlat, v))
}

// PlatNEQ applies the NEQ predicate on the "plat" field.
func PlatNEQ(v int8) predicate.Reply {
	return predicate.Reply(sql.FieldNEQ(FieldPlat, v))
}

// PlatIn applies the In predicate on the "plat" field.
func PlatIn(vs ...int8) predicate.Reply {
	return predicate.Reply(sql.FieldIn(FieldPlat, vs...))
}

// PlatNotIn applies the NotIn predicate on the "plat" field.
func PlatNotIn(vs ...int8) predicate.Reply {
	return predicate.Reply(sql.FieldNotIn(FieldPlat, vs...))
}

// PlatGT applies the GT predicate on the "plat" field.
func PlatGT(v int8) predicate.Reply {
	return predicate.Reply(sql.FieldGT(FieldPlat, v))
}

// PlatGTE applies the GTE predicate on the "plat" field.
func PlatGTE(v int8) predicate.Reply {
	return predicate.Reply(sql.FieldGTE(FieldPlat, v))
}

// PlatLT applies the LT predicate on the "plat" field.
func PlatLT(v int8) predicate.Reply {
	return predicate.Reply(sql.FieldLT(FieldPlat, v))
}

// PlatLTE applies the LTE predicate on the "plat" field.
func PlatLTE(v int8) predicate.Reply {
	return predicate.Reply(sql.FieldLTE(FieldPlat, v))
}

// DeviceEQ applies the EQ predicate on the "device" field.
func DeviceEQ(v string) predicate.Reply {
	return predicate.Reply(sql.FieldEQ(FieldDevice, v))
}

// DeviceNEQ applies the NEQ predicate on the "device" field.
func DeviceNEQ(v string) predicate.Reply {
	return predicate.Reply(sql.FieldNEQ(FieldDevice, v))
}

// DeviceIn applies the In predicate on the "device" field.
func DeviceIn(vs ...string) predicate.Reply {
	return predicate.Reply(sql.FieldIn(FieldDevice, vs...))
}

// DeviceNotIn applies the NotIn predicate on the "device" field.
func DeviceNotIn(vs ...string) predicate.Reply {
	return predicate.Reply(sql.FieldNotIn(FieldDevice, vs...))
}

// DeviceGT applies the GT predicate on the "device" field.
func DeviceGT(v string) predicate.Reply {
	return predicate.Reply(sql.FieldGT(FieldDevice, v))
}

// DeviceGTE applies the GTE predicate on the "device" field.
func DeviceGTE(v string) predicate.Reply {
	return predicate.Reply(sql.FieldGTE(FieldDevice, v))
}

// DeviceLT applies the LT predicate on the "device" field.
func DeviceLT(v string) predicate.Reply {
	return predicate.Reply(sql.FieldLT(FieldDevice, v))
}

// DeviceLTE applies the LTE predicate on the "device" field.
func DeviceLTE(v string) predicate.Reply {
	return predicate.Reply(sql.FieldLTE(FieldDevice, v))
}

// DeviceContains applies the Contains predicate on the "device" field.
func DeviceContains(v string) predicate.Reply {
	return predicate.Reply(sql.FieldContains(FieldDevice, v))
}

// DeviceHasPrefix applies the HasPrefix predicate on the "device" field.
func DeviceHasPrefix(v string) predicate.Reply {
	return predicate.Reply(sql.FieldHasPrefix(FieldDevice, v))
}

// DeviceHasSuffix applies the HasSuffix predicate on the "device" field.
func DeviceHasSuffix(v string) predicate.Reply {
	return predicate.Reply(sql.FieldHasSuffix(FieldDevice, v))
}

// DeviceEqualFold applies the EqualFold predicate on the "device" field.
func DeviceEqualFold(v string) predicate.Reply {
	return predicate.Reply(sql.FieldEqualFold(FieldDevice, v))
}

// DeviceContainsFold applies the ContainsFold predicate on the "device" field.
func DeviceContainsFold(v string) predicate.Reply {
	return predicate.Reply(sql.FieldContainsFold(FieldDevice, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v string) predicate.Reply {
	return predicate.Reply(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v string) predicate.Reply {
	return predicate.Reply(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...string) predicate.Reply {
	return predicate.Reply(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...string) predicate.Reply {
	return predicate.Reply(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v string) predicate.Reply {
	return predicate.Reply(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v string) predicate.Reply {
	return predicate.Reply(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v string) predicate.Reply {
	return predicate.Reply(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v string) predicate.Reply {
	return predicate.Reply(sql.FieldLTE(FieldVersion, v))
}

// VersionContains applies the Contains predicate on the "version" field.
func VersionContains(v string) predicate.Reply {
	return predicate.Reply(sql.FieldContains(FieldVersion, v))
}

// VersionHasPrefix applies the HasPrefix predicate on the "version" field.
func VersionHasPrefix(v string) predicate.Reply {
	return predicate.Reply(sql.FieldHasPrefix(FieldVersion, v))
}

// VersionHasSuffix applies the HasSuffix predicate on the "version" field.
func VersionHasSuffix(v string) predicate.Reply {
	return predicate.Reply(sql.FieldHasSuffix(FieldVersion, v))
}

// VersionEqualFold applies the EqualFold predicate on the "version" field.
func VersionEqualFold(v string) predicate.Reply {
	return predicate.Reply(sql.FieldEqualFold(FieldVersion, v))
}

// VersionContainsFold applies the ContainsFold predicate on the "version" field.
func VersionContainsFold(v string) predicate.Reply {
	return predicate.Reply(sql.FieldContainsFold(FieldVersion, v))
}

// CtimeEQ applies the EQ predicate on the "ctime" field.
func CtimeEQ(v time.Time) predicate.Reply {
	return predicate.Reply(sql.FieldEQ(FieldCtime, v))
}

// CtimeNEQ applies the NEQ predicate on the "ctime" field.
func CtimeNEQ(v time.Time) predicate.Reply {
	return predicate.Reply(sql.FieldNEQ(FieldCtime, v))
}

// CtimeIn applies the In predicate on the "ctime" field.
func CtimeIn(vs ...time.Time) predicate.Reply {
	return predicate.Reply(sql.FieldIn(FieldCtime, vs...))
}

// CtimeNotIn applies the NotIn predicate on the "ctime" field.
func CtimeNotIn(vs ...time.Time) predicate.Reply {
	return predicate.Reply(sql.FieldNotIn(FieldCtime, vs...))
}

// CtimeGT applies the GT predicate on the "ctime" field.
func CtimeGT(v time.Time) predicate.Reply {
	return predicate.Reply(sql.FieldGT(FieldCtime, v))
}

// CtimeGTE applies the GTE predicate on the "ctime" field.
func CtimeGTE(v time.Time) predicate.Reply {
	return predicate.Reply(sql.FieldGTE(FieldCtime, v))
}

// CtimeLT applies the LT predicate on the "ctime" field.
func CtimeLT(v time.Time) predicate.Reply {
	return predicate.Reply(sql.FieldLT(FieldCtime, v))
}

// CtimeLTE applies the LTE predicate on the "ctime" field.
func CtimeLTE(v time.Time) predicate.Reply {
	return predicate.Reply(sql.FieldLTE(FieldCtime, v))
}

// MtimeEQ applies the EQ predicate on the "mtime" field.
func MtimeEQ(v time.Time) predicate.Reply {
	return predicate.Reply(sql.FieldEQ(FieldMtime, v))
}

// MtimeNEQ applies the NEQ predicate on the "mtime" field.
func MtimeNEQ(v time.Time) predicate.Reply {
	return predicate.Reply(sql.FieldNEQ(FieldMtime, v))
}

// MtimeIn applies the In predicate on the "mtime" field.
func MtimeIn(vs ...time.Time) predicate.Reply {
	return predicate.Reply(sql.FieldIn(FieldMtime, vs...))
}

// MtimeNotIn applies the NotIn predicate on the "mtime" field.
func MtimeNotIn(vs ...time.Time) predicate.Reply {
	return predicate.Reply(sql.FieldNotIn(FieldMtime, vs...))
}

// MtimeGT applies the GT predicate on the "mtime" field.
func MtimeGT(v time.Time) predicate.Reply {
	return predicate.Reply(sql.FieldGT(FieldMtime, v))
}

// MtimeGTE applies the GTE predicate on the "mtime" field.
func MtimeGTE(v time.Time) predicate.Reply {
	return predicate.Reply(sql.FieldGTE(FieldMtime, v))
}

// MtimeLT applies the LT predicate on the "mtime" field.
func MtimeLT(v time.Time) predicate.Reply {
	return predicate.Reply(sql.FieldLT(FieldMtime, v))
}

// MtimeLTE applies the LTE predicate on the "mtime" field.
func MtimeLTE(v time.Time) predicate.Reply {
	return predicate.Reply(sql.FieldLTE(FieldMtime, v))
}

// TopicsEQ applies the EQ predicate on the "topics" field.
func TopicsEQ(v string) predicate.Reply {
	return predicate.Reply(sql.FieldEQ(FieldTopics, v))
}

// TopicsNEQ applies the NEQ predicate on the "topics" field.
func TopicsNEQ(v string) predicate.Reply {
	return predicate.Reply(sql.FieldNEQ(FieldTopics, v))
}

// TopicsIn applies the In predicate on the "topics" field.
func TopicsIn(vs ...string) predicate.Reply {
	return predicate.Reply(sql.FieldIn(FieldTopics, vs...))
}

// TopicsNotIn applies the NotIn predicate on the "topics" field.
func TopicsNotIn(vs ...string) predicate.Reply {
	return predicate.Reply(sql.FieldNotIn(FieldTopics, vs...))
}

// TopicsGT applies the GT predicate on the "topics" field.
func TopicsGT(v string) predicate.Reply {
	return predicate.Reply(sql.FieldGT(FieldTopics, v))
}

// TopicsGTE applies the GTE predicate on the "topics" field.
func TopicsGTE(v string) predicate.Reply {
	return predicate.Reply(sql.FieldGTE(FieldTopics, v))
}

// TopicsLT applies the LT predicate on the "topics" field.
func TopicsLT(v string) predicate.Reply {
	return predicate.Reply(sql.FieldLT(FieldTopics, v))
}

// TopicsLTE applies the LTE predicate on the "topics" field.
func TopicsLTE(v string) predicate.Reply {
	return predicate.Reply(sql.FieldLTE(FieldTopics, v))
}

// TopicsContains applies the Contains predicate on the "topics" field.
func TopicsContains(v string) predicate.Reply {
	return predicate.Reply(sql.FieldContains(FieldTopics, v))
}

// TopicsHasPrefix applies the HasPrefix predicate on the "topics" field.
func TopicsHasPrefix(v string) predicate.Reply {
	return predicate.Reply(sql.FieldHasPrefix(FieldTopics, v))
}

// TopicsHasSuffix applies the HasSuffix predicate on the "topics" field.
func TopicsHasSuffix(v string) predicate.Reply {
	return predicate.Reply(sql.FieldHasSuffix(FieldTopics, v))
}

// TopicsEqualFold applies the EqualFold predicate on the "topics" field.
func TopicsEqualFold(v string) predicate.Reply {
	return predicate.Reply(sql.FieldEqualFold(FieldTopics, v))
}

// TopicsContainsFold applies the ContainsFold predicate on the "topics" field.
func TopicsContainsFold(v string) predicate.Reply {
	return predicate.Reply(sql.FieldContainsFold(FieldTopics, v))
}

// AddrEQ applies the EQ predicate on the "addr" field.
func AddrEQ(v string) predicate.Reply {
	return predicate.Reply(sql.FieldEQ(FieldAddr, v))
}

// AddrNEQ applies the NEQ predicate on the "addr" field.
func AddrNEQ(v string) predicate.Reply {
	return predicate.Reply(sql.FieldNEQ(FieldAddr, v))
}

// AddrIn applies the In predicate on the "addr" field.
func AddrIn(vs ...string) predicate.Reply {
	return predicate.Reply(sql.FieldIn(FieldAddr, vs...))
}

// AddrNotIn applies the NotIn predicate on the "addr" field.
func AddrNotIn(vs ...string) predicate.Reply {
	return predicate.Reply(sql.FieldNotIn(FieldAddr, vs...))
}

// AddrGT applies the GT predicate on the "addr" field.
func AddrGT(v string) predicate.Reply {
	return predicate.Reply(sql.FieldGT(FieldAddr, v))
}

// AddrGTE applies the GTE predicate on the "addr" field.
func AddrGTE(v string) predicate.Reply {
	return predicate.Reply(sql.FieldGTE(FieldAddr, v))
}

// AddrLT applies the LT predicate on the "addr" field.
func AddrLT(v string) predicate.Reply {
	return predicate.Reply(sql.FieldLT(FieldAddr, v))
}

// AddrLTE applies the LTE predicate on the "addr" field.
func AddrLTE(v string) predicate.Reply {
	return predicate.Reply(sql.FieldLTE(FieldAddr, v))
}

// AddrContains applies the Contains predicate on the "addr" field.
func AddrContains(v string) predicate.Reply {
	return predicate.Reply(sql.FieldContains(FieldAddr, v))
}

// AddrHasPrefix applies the HasPrefix predicate on the "addr" field.
func AddrHasPrefix(v string) predicate.Reply {
	return predicate.Reply(sql.FieldHasPrefix(FieldAddr, v))
}

// AddrHasSuffix applies the HasSuffix predicate on the "addr" field.
func AddrHasSuffix(v string) predicate.Reply {
	return predicate.Reply(sql.FieldHasSuffix(FieldAddr, v))
}

// AddrEqualFold applies the EqualFold predicate on the "addr" field.
func AddrEqualFold(v string) predicate.Reply {
	return predicate.Reply(sql.FieldEqualFold(FieldAddr, v))
}

// AddrContainsFold applies the ContainsFold predicate on the "addr" field.
func AddrContainsFold(v string) predicate.Reply {
	return predicate.Reply(sql.FieldContainsFold(FieldAddr, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Reply) predicate.Reply {
	return predicate.Reply(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Reply) predicate.Reply {
	return predicate.Reply(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Reply) predicate.Reply {
	return predicate.Reply(func(s *sql.Selector) {
		p(s.Not())
	})
}
