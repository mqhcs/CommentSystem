// Code generated by ent, DO NOT EDIT.

package reply

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the reply type in the database.
	Label = "reply"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldMessage holds the string denoting the message field in the database.
	FieldMessage = "message"
	// FieldAts holds the string denoting the ats field in the database.
	FieldAts = "ats"
	// FieldIP holds the string denoting the ip field in the database.
	FieldIP = "ip"
	// FieldPlat holds the string denoting the plat field in the database.
	FieldPlat = "plat"
	// FieldDevice holds the string denoting the device field in the database.
	FieldDevice = "device"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldCtime holds the string denoting the ctime field in the database.
	FieldCtime = "ctime"
	// FieldMtime holds the string denoting the mtime field in the database.
	FieldMtime = "mtime"
	// FieldTopics holds the string denoting the topics field in the database.
	FieldTopics = "topics"
	// FieldAddr holds the string denoting the addr field in the database.
	FieldAddr = "addr"
	// Table holds the table name of the reply in the database.
	Table = "replies"
)

// Columns holds all SQL columns for reply fields.
var Columns = []string{
	FieldID,
	FieldMessage,
	FieldAts,
	FieldIP,
	FieldPlat,
	FieldDevice,
	FieldVersion,
	FieldCtime,
	FieldMtime,
	FieldTopics,
	FieldAddr,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCtime holds the default value on creation for the "ctime" field.
	DefaultCtime func() time.Time
	// DefaultMtime holds the default value on creation for the "mtime" field.
	DefaultMtime func() time.Time
)

// OrderOption defines the ordering options for the Reply queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByMessage orders the results by the message field.
func ByMessage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMessage, opts...).ToFunc()
}

// ByAts orders the results by the ats field.
func ByAts(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAts, opts...).ToFunc()
}

// ByIP orders the results by the ip field.
func ByIP(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIP, opts...).ToFunc()
}

// ByPlat orders the results by the plat field.
func ByPlat(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPlat, opts...).ToFunc()
}

// ByDevice orders the results by the device field.
func ByDevice(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDevice, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}

// ByCtime orders the results by the ctime field.
func ByCtime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCtime, opts...).ToFunc()
}

// ByMtime orders the results by the mtime field.
func ByMtime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMtime, opts...).ToFunc()
}

// ByTopics orders the results by the topics field.
func ByTopics(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTopics, opts...).ToFunc()
}

// ByAddr orders the results by the addr field.
func ByAddr(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddr, opts...).ToFunc()
}
