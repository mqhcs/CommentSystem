// Code generated by ent, DO NOT EDIT.

package ent

import (
	"comment-main/app/comment-service/internal/data/ent/reply"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Reply is the model entity for the Reply schema.
type Reply struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Rpid holds the value of the "rpid" field.
	Rpid int64 `json:"rpid,omitempty"`
	// Message holds the value of the "message" field.
	Message string `json:"message,omitempty"`
	// Ats holds the value of the "ats" field.
	Ats string `json:"ats,omitempty"`
	// IP holds the value of the "ip" field.
	IP int64 `json:"ip,omitempty"`
	// Plat holds the value of the "plat" field.
	Plat int8 `json:"plat,omitempty"`
	// Device holds the value of the "device" field.
	Device string `json:"device,omitempty"`
	// Version holds the value of the "version" field.
	Version string `json:"version,omitempty"`
	// Ctime holds the value of the "ctime" field.
	Ctime time.Time `json:"ctime,omitempty"`
	// Mtime holds the value of the "mtime" field.
	Mtime time.Time `json:"mtime,omitempty"`
	// Topics holds the value of the "topics" field.
	Topics string `json:"topics,omitempty"`
	// Addr holds the value of the "addr" field.
	Addr         string `json:"addr,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Reply) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case reply.FieldID, reply.FieldRpid, reply.FieldIP, reply.FieldPlat:
			values[i] = new(sql.NullInt64)
		case reply.FieldMessage, reply.FieldAts, reply.FieldDevice, reply.FieldVersion, reply.FieldTopics, reply.FieldAddr:
			values[i] = new(sql.NullString)
		case reply.FieldCtime, reply.FieldMtime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Reply fields.
func (r *Reply) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case reply.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int(value.Int64)
		case reply.FieldRpid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rpid", values[i])
			} else if value.Valid {
				r.Rpid = value.Int64
			}
		case reply.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message", values[i])
			} else if value.Valid {
				r.Message = value.String
			}
		case reply.FieldAts:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ats", values[i])
			} else if value.Valid {
				r.Ats = value.String
			}
		case reply.FieldIP:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ip", values[i])
			} else if value.Valid {
				r.IP = value.Int64
			}
		case reply.FieldPlat:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field plat", values[i])
			} else if value.Valid {
				r.Plat = int8(value.Int64)
			}
		case reply.FieldDevice:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field device", values[i])
			} else if value.Valid {
				r.Device = value.String
			}
		case reply.FieldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				r.Version = value.String
			}
		case reply.FieldCtime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ctime", values[i])
			} else if value.Valid {
				r.Ctime = value.Time
			}
		case reply.FieldMtime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field mtime", values[i])
			} else if value.Valid {
				r.Mtime = value.Time
			}
		case reply.FieldTopics:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field topics", values[i])
			} else if value.Valid {
				r.Topics = value.String
			}
		case reply.FieldAddr:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field addr", values[i])
			} else if value.Valid {
				r.Addr = value.String
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Reply.
// This includes values selected through modifiers, order, etc.
func (r *Reply) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// Update returns a builder for updating this Reply.
// Note that you need to call Reply.Unwrap() before calling this method if this Reply
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Reply) Update() *ReplyUpdateOne {
	return NewReplyClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Reply entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Reply) Unwrap() *Reply {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Reply is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Reply) String() string {
	var builder strings.Builder
	builder.WriteString("Reply(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("rpid=")
	builder.WriteString(fmt.Sprintf("%v", r.Rpid))
	builder.WriteString(", ")
	builder.WriteString("message=")
	builder.WriteString(r.Message)
	builder.WriteString(", ")
	builder.WriteString("ats=")
	builder.WriteString(r.Ats)
	builder.WriteString(", ")
	builder.WriteString("ip=")
	builder.WriteString(fmt.Sprintf("%v", r.IP))
	builder.WriteString(", ")
	builder.WriteString("plat=")
	builder.WriteString(fmt.Sprintf("%v", r.Plat))
	builder.WriteString(", ")
	builder.WriteString("device=")
	builder.WriteString(r.Device)
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(r.Version)
	builder.WriteString(", ")
	builder.WriteString("ctime=")
	builder.WriteString(r.Ctime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("mtime=")
	builder.WriteString(r.Mtime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("topics=")
	builder.WriteString(r.Topics)
	builder.WriteString(", ")
	builder.WriteString("addr=")
	builder.WriteString(r.Addr)
	builder.WriteByte(')')
	return builder.String()
}

// Replies is a parsable slice of Reply.
type Replies []*Reply
