// Code generated by ent, DO NOT EDIT.

package replyindex

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the replyindex type in the database.
	Label = "reply_index"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldOid holds the string denoting the oid field in the database.
	FieldOid = "oid"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldMid holds the string denoting the mid field in the database.
	FieldMid = "mid"
	// FieldRoot holds the string denoting the root field in the database.
	FieldRoot = "root"
	// FieldParent holds the string denoting the parent field in the database.
	FieldParent = "parent"
	// FieldCount holds the string denoting the count field in the database.
	FieldCount = "count"
	// FieldRcount holds the string denoting the rcount field in the database.
	FieldRcount = "rcount"
	// FieldAcount holds the string denoting the acount field in the database.
	FieldAcount = "acount"
	// FieldLikes holds the string denoting the likes field in the database.
	FieldLikes = "likes"
	// FieldHates holds the string denoting the hates field in the database.
	FieldHates = "hates"
	// FieldReportCount holds the string denoting the report_count field in the database.
	FieldReportCount = "report_count"
	// FieldState holds the string denoting the state field in the database.
	FieldState = "state"
	// FieldCtime holds the string denoting the ctime field in the database.
	FieldCtime = "ctime"
	// FieldMtime holds the string denoting the mtime field in the database.
	FieldMtime = "mtime"
	// Table holds the table name of the replyindex in the database.
	Table = "reply_indexes"
)

// Columns holds all SQL columns for replyindex fields.
var Columns = []string{
	FieldID,
	FieldOid,
	FieldType,
	FieldMid,
	FieldRoot,
	FieldParent,
	FieldCount,
	FieldRcount,
	FieldAcount,
	FieldLikes,
	FieldHates,
	FieldReportCount,
	FieldState,
	FieldCtime,
	FieldMtime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCtime holds the default value on creation for the "ctime" field.
	DefaultCtime func() time.Time
	// DefaultMtime holds the default value on creation for the "mtime" field.
	DefaultMtime func() time.Time
)

// OrderOption defines the ordering options for the ReplyIndex queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByOid orders the results by the oid field.
func ByOid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOid, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByMid orders the results by the mid field.
func ByMid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMid, opts...).ToFunc()
}

// ByRoot orders the results by the root field.
func ByRoot(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRoot, opts...).ToFunc()
}

// ByParent orders the results by the parent field.
func ByParent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParent, opts...).ToFunc()
}

// ByCount orders the results by the count field.
func ByCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCount, opts...).ToFunc()
}

// ByRcount orders the results by the rcount field.
func ByRcount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRcount, opts...).ToFunc()
}

// ByAcount orders the results by the acount field.
func ByAcount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAcount, opts...).ToFunc()
}

// ByLikes orders the results by the likes field.
func ByLikes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLikes, opts...).ToFunc()
}

// ByHates orders the results by the hates field.
func ByHates(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHates, opts...).ToFunc()
}

// ByReportCount orders the results by the report_count field.
func ByReportCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReportCount, opts...).ToFunc()
}

// ByState orders the results by the state field.
func ByState(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldState, opts...).ToFunc()
}

// ByCtime orders the results by the ctime field.
func ByCtime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCtime, opts...).ToFunc()
}

// ByMtime orders the results by the mtime field.
func ByMtime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMtime, opts...).ToFunc()
}
