// Code generated by ent, DO NOT EDIT.

package ent

import (
	"comment-main/app/comment-service/internal/data/ent/predicate"
	"comment-main/app/comment-service/internal/data/ent/reply"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ReplyUpdate is the builder for updating Reply entities.
type ReplyUpdate struct {
	config
	hooks    []Hook
	mutation *ReplyMutation
}

// Where appends a list predicates to the ReplyUpdate builder.
func (ru *ReplyUpdate) Where(ps ...predicate.Reply) *ReplyUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetRpid sets the "rpid" field.
func (ru *ReplyUpdate) SetRpid(i int64) *ReplyUpdate {
	ru.mutation.ResetRpid()
	ru.mutation.SetRpid(i)
	return ru
}

// AddRpid adds i to the "rpid" field.
func (ru *ReplyUpdate) AddRpid(i int64) *ReplyUpdate {
	ru.mutation.AddRpid(i)
	return ru
}

// SetMessage sets the "message" field.
func (ru *ReplyUpdate) SetMessage(s string) *ReplyUpdate {
	ru.mutation.SetMessage(s)
	return ru
}

// SetAts sets the "ats" field.
func (ru *ReplyUpdate) SetAts(s string) *ReplyUpdate {
	ru.mutation.SetAts(s)
	return ru
}

// SetIP sets the "ip" field.
func (ru *ReplyUpdate) SetIP(i int64) *ReplyUpdate {
	ru.mutation.ResetIP()
	ru.mutation.SetIP(i)
	return ru
}

// AddIP adds i to the "ip" field.
func (ru *ReplyUpdate) AddIP(i int64) *ReplyUpdate {
	ru.mutation.AddIP(i)
	return ru
}

// SetPlat sets the "plat" field.
func (ru *ReplyUpdate) SetPlat(i int8) *ReplyUpdate {
	ru.mutation.ResetPlat()
	ru.mutation.SetPlat(i)
	return ru
}

// AddPlat adds i to the "plat" field.
func (ru *ReplyUpdate) AddPlat(i int8) *ReplyUpdate {
	ru.mutation.AddPlat(i)
	return ru
}

// SetDevice sets the "device" field.
func (ru *ReplyUpdate) SetDevice(s string) *ReplyUpdate {
	ru.mutation.SetDevice(s)
	return ru
}

// SetVersion sets the "version" field.
func (ru *ReplyUpdate) SetVersion(s string) *ReplyUpdate {
	ru.mutation.SetVersion(s)
	return ru
}

// SetCtime sets the "ctime" field.
func (ru *ReplyUpdate) SetCtime(t time.Time) *ReplyUpdate {
	ru.mutation.SetCtime(t)
	return ru
}

// SetNillableCtime sets the "ctime" field if the given value is not nil.
func (ru *ReplyUpdate) SetNillableCtime(t *time.Time) *ReplyUpdate {
	if t != nil {
		ru.SetCtime(*t)
	}
	return ru
}

// SetMtime sets the "mtime" field.
func (ru *ReplyUpdate) SetMtime(t time.Time) *ReplyUpdate {
	ru.mutation.SetMtime(t)
	return ru
}

// SetNillableMtime sets the "mtime" field if the given value is not nil.
func (ru *ReplyUpdate) SetNillableMtime(t *time.Time) *ReplyUpdate {
	if t != nil {
		ru.SetMtime(*t)
	}
	return ru
}

// SetTopics sets the "topics" field.
func (ru *ReplyUpdate) SetTopics(s string) *ReplyUpdate {
	ru.mutation.SetTopics(s)
	return ru
}

// SetAddr sets the "addr" field.
func (ru *ReplyUpdate) SetAddr(s string) *ReplyUpdate {
	ru.mutation.SetAddr(s)
	return ru
}

// Mutation returns the ReplyMutation object of the builder.
func (ru *ReplyUpdate) Mutation() *ReplyMutation {
	return ru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *ReplyUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *ReplyUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *ReplyUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *ReplyUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ru *ReplyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(reply.Table, reply.Columns, sqlgraph.NewFieldSpec(reply.FieldID, field.TypeInt))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Rpid(); ok {
		_spec.SetField(reply.FieldRpid, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.AddedRpid(); ok {
		_spec.AddField(reply.FieldRpid, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.Message(); ok {
		_spec.SetField(reply.FieldMessage, field.TypeString, value)
	}
	if value, ok := ru.mutation.Ats(); ok {
		_spec.SetField(reply.FieldAts, field.TypeString, value)
	}
	if value, ok := ru.mutation.IP(); ok {
		_spec.SetField(reply.FieldIP, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.AddedIP(); ok {
		_spec.AddField(reply.FieldIP, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.Plat(); ok {
		_spec.SetField(reply.FieldPlat, field.TypeInt8, value)
	}
	if value, ok := ru.mutation.AddedPlat(); ok {
		_spec.AddField(reply.FieldPlat, field.TypeInt8, value)
	}
	if value, ok := ru.mutation.Device(); ok {
		_spec.SetField(reply.FieldDevice, field.TypeString, value)
	}
	if value, ok := ru.mutation.Version(); ok {
		_spec.SetField(reply.FieldVersion, field.TypeString, value)
	}
	if value, ok := ru.mutation.Ctime(); ok {
		_spec.SetField(reply.FieldCtime, field.TypeTime, value)
	}
	if value, ok := ru.mutation.Mtime(); ok {
		_spec.SetField(reply.FieldMtime, field.TypeTime, value)
	}
	if value, ok := ru.mutation.Topics(); ok {
		_spec.SetField(reply.FieldTopics, field.TypeString, value)
	}
	if value, ok := ru.mutation.Addr(); ok {
		_spec.SetField(reply.FieldAddr, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reply.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// ReplyUpdateOne is the builder for updating a single Reply entity.
type ReplyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ReplyMutation
}

// SetRpid sets the "rpid" field.
func (ruo *ReplyUpdateOne) SetRpid(i int64) *ReplyUpdateOne {
	ruo.mutation.ResetRpid()
	ruo.mutation.SetRpid(i)
	return ruo
}

// AddRpid adds i to the "rpid" field.
func (ruo *ReplyUpdateOne) AddRpid(i int64) *ReplyUpdateOne {
	ruo.mutation.AddRpid(i)
	return ruo
}

// SetMessage sets the "message" field.
func (ruo *ReplyUpdateOne) SetMessage(s string) *ReplyUpdateOne {
	ruo.mutation.SetMessage(s)
	return ruo
}

// SetAts sets the "ats" field.
func (ruo *ReplyUpdateOne) SetAts(s string) *ReplyUpdateOne {
	ruo.mutation.SetAts(s)
	return ruo
}

// SetIP sets the "ip" field.
func (ruo *ReplyUpdateOne) SetIP(i int64) *ReplyUpdateOne {
	ruo.mutation.ResetIP()
	ruo.mutation.SetIP(i)
	return ruo
}

// AddIP adds i to the "ip" field.
func (ruo *ReplyUpdateOne) AddIP(i int64) *ReplyUpdateOne {
	ruo.mutation.AddIP(i)
	return ruo
}

// SetPlat sets the "plat" field.
func (ruo *ReplyUpdateOne) SetPlat(i int8) *ReplyUpdateOne {
	ruo.mutation.ResetPlat()
	ruo.mutation.SetPlat(i)
	return ruo
}

// AddPlat adds i to the "plat" field.
func (ruo *ReplyUpdateOne) AddPlat(i int8) *ReplyUpdateOne {
	ruo.mutation.AddPlat(i)
	return ruo
}

// SetDevice sets the "device" field.
func (ruo *ReplyUpdateOne) SetDevice(s string) *ReplyUpdateOne {
	ruo.mutation.SetDevice(s)
	return ruo
}

// SetVersion sets the "version" field.
func (ruo *ReplyUpdateOne) SetVersion(s string) *ReplyUpdateOne {
	ruo.mutation.SetVersion(s)
	return ruo
}

// SetCtime sets the "ctime" field.
func (ruo *ReplyUpdateOne) SetCtime(t time.Time) *ReplyUpdateOne {
	ruo.mutation.SetCtime(t)
	return ruo
}

// SetNillableCtime sets the "ctime" field if the given value is not nil.
func (ruo *ReplyUpdateOne) SetNillableCtime(t *time.Time) *ReplyUpdateOne {
	if t != nil {
		ruo.SetCtime(*t)
	}
	return ruo
}

// SetMtime sets the "mtime" field.
func (ruo *ReplyUpdateOne) SetMtime(t time.Time) *ReplyUpdateOne {
	ruo.mutation.SetMtime(t)
	return ruo
}

// SetNillableMtime sets the "mtime" field if the given value is not nil.
func (ruo *ReplyUpdateOne) SetNillableMtime(t *time.Time) *ReplyUpdateOne {
	if t != nil {
		ruo.SetMtime(*t)
	}
	return ruo
}

// SetTopics sets the "topics" field.
func (ruo *ReplyUpdateOne) SetTopics(s string) *ReplyUpdateOne {
	ruo.mutation.SetTopics(s)
	return ruo
}

// SetAddr sets the "addr" field.
func (ruo *ReplyUpdateOne) SetAddr(s string) *ReplyUpdateOne {
	ruo.mutation.SetAddr(s)
	return ruo
}

// Mutation returns the ReplyMutation object of the builder.
func (ruo *ReplyUpdateOne) Mutation() *ReplyMutation {
	return ruo.mutation
}

// Where appends a list predicates to the ReplyUpdate builder.
func (ruo *ReplyUpdateOne) Where(ps ...predicate.Reply) *ReplyUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *ReplyUpdateOne) Select(field string, fields ...string) *ReplyUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Reply entity.
func (ruo *ReplyUpdateOne) Save(ctx context.Context) (*Reply, error) {
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *ReplyUpdateOne) SaveX(ctx context.Context) *Reply {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *ReplyUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *ReplyUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ruo *ReplyUpdateOne) sqlSave(ctx context.Context) (_node *Reply, err error) {
	_spec := sqlgraph.NewUpdateSpec(reply.Table, reply.Columns, sqlgraph.NewFieldSpec(reply.FieldID, field.TypeInt))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Reply.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, reply.FieldID)
		for _, f := range fields {
			if !reply.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != reply.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.Rpid(); ok {
		_spec.SetField(reply.FieldRpid, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.AddedRpid(); ok {
		_spec.AddField(reply.FieldRpid, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.Message(); ok {
		_spec.SetField(reply.FieldMessage, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Ats(); ok {
		_spec.SetField(reply.FieldAts, field.TypeString, value)
	}
	if value, ok := ruo.mutation.IP(); ok {
		_spec.SetField(reply.FieldIP, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.AddedIP(); ok {
		_spec.AddField(reply.FieldIP, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.Plat(); ok {
		_spec.SetField(reply.FieldPlat, field.TypeInt8, value)
	}
	if value, ok := ruo.mutation.AddedPlat(); ok {
		_spec.AddField(reply.FieldPlat, field.TypeInt8, value)
	}
	if value, ok := ruo.mutation.Device(); ok {
		_spec.SetField(reply.FieldDevice, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Version(); ok {
		_spec.SetField(reply.FieldVersion, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Ctime(); ok {
		_spec.SetField(reply.FieldCtime, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.Mtime(); ok {
		_spec.SetField(reply.FieldMtime, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.Topics(); ok {
		_spec.SetField(reply.FieldTopics, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Addr(); ok {
		_spec.SetField(reply.FieldAddr, field.TypeString, value)
	}
	_node = &Reply{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{reply.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}

