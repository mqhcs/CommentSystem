// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"entcdemo/ent/reply"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ReplyCreate is the builder for creating a Reply entity.
type ReplyCreate struct {
	config
	mutation *ReplyMutation
	hooks    []Hook
}

// SetMessage sets the "message" field.
func (rc *ReplyCreate) SetMessage(s string) *ReplyCreate {
	rc.mutation.SetMessage(s)
	return rc
}

// SetAts sets the "ats" field.
func (rc *ReplyCreate) SetAts(s string) *ReplyCreate {
	rc.mutation.SetAts(s)
	return rc
}

// SetIP sets the "ip" field.
func (rc *ReplyCreate) SetIP(i int64) *ReplyCreate {
	rc.mutation.SetIP(i)
	return rc
}

// SetPlat sets the "plat" field.
func (rc *ReplyCreate) SetPlat(i int8) *ReplyCreate {
	rc.mutation.SetPlat(i)
	return rc
}

// SetDevice sets the "device" field.
func (rc *ReplyCreate) SetDevice(s string) *ReplyCreate {
	rc.mutation.SetDevice(s)
	return rc
}

// SetVersion sets the "version" field.
func (rc *ReplyCreate) SetVersion(s string) *ReplyCreate {
	rc.mutation.SetVersion(s)
	return rc
}

// SetCtime sets the "ctime" field.
func (rc *ReplyCreate) SetCtime(t time.Time) *ReplyCreate {
	rc.mutation.SetCtime(t)
	return rc
}

// SetNillableCtime sets the "ctime" field if the given value is not nil.
func (rc *ReplyCreate) SetNillableCtime(t *time.Time) *ReplyCreate {
	if t != nil {
		rc.SetCtime(*t)
	}
	return rc
}

// SetMtime sets the "mtime" field.
func (rc *ReplyCreate) SetMtime(t time.Time) *ReplyCreate {
	rc.mutation.SetMtime(t)
	return rc
}

// SetNillableMtime sets the "mtime" field if the given value is not nil.
func (rc *ReplyCreate) SetNillableMtime(t *time.Time) *ReplyCreate {
	if t != nil {
		rc.SetMtime(*t)
	}
	return rc
}

// SetTopics sets the "topics" field.
func (rc *ReplyCreate) SetTopics(s string) *ReplyCreate {
	rc.mutation.SetTopics(s)
	return rc
}

// SetAddr sets the "addr" field.
func (rc *ReplyCreate) SetAddr(s string) *ReplyCreate {
	rc.mutation.SetAddr(s)
	return rc
}

// SetID sets the "id" field.
func (rc *ReplyCreate) SetID(i int64) *ReplyCreate {
	rc.mutation.SetID(i)
	return rc
}

// Mutation returns the ReplyMutation object of the builder.
func (rc *ReplyCreate) Mutation() *ReplyMutation {
	return rc.mutation
}

// Save creates the Reply in the database.
func (rc *ReplyCreate) Save(ctx context.Context) (*Reply, error) {
	rc.defaults()
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *ReplyCreate) SaveX(ctx context.Context) *Reply {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *ReplyCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *ReplyCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *ReplyCreate) defaults() {
	if _, ok := rc.mutation.Ctime(); !ok {
		v := reply.DefaultCtime()
		rc.mutation.SetCtime(v)
	}
	if _, ok := rc.mutation.Mtime(); !ok {
		v := reply.DefaultMtime()
		rc.mutation.SetMtime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *ReplyCreate) check() error {
	if _, ok := rc.mutation.Message(); !ok {
		return &ValidationError{Name: "message", err: errors.New(`ent: missing required field "Reply.message"`)}
	}
	if _, ok := rc.mutation.Ats(); !ok {
		return &ValidationError{Name: "ats", err: errors.New(`ent: missing required field "Reply.ats"`)}
	}
	if _, ok := rc.mutation.IP(); !ok {
		return &ValidationError{Name: "ip", err: errors.New(`ent: missing required field "Reply.ip"`)}
	}
	if _, ok := rc.mutation.Plat(); !ok {
		return &ValidationError{Name: "plat", err: errors.New(`ent: missing required field "Reply.plat"`)}
	}
	if _, ok := rc.mutation.Device(); !ok {
		return &ValidationError{Name: "device", err: errors.New(`ent: missing required field "Reply.device"`)}
	}
	if _, ok := rc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "Reply.version"`)}
	}
	if _, ok := rc.mutation.Ctime(); !ok {
		return &ValidationError{Name: "ctime", err: errors.New(`ent: missing required field "Reply.ctime"`)}
	}
	if _, ok := rc.mutation.Mtime(); !ok {
		return &ValidationError{Name: "mtime", err: errors.New(`ent: missing required field "Reply.mtime"`)}
	}
	if _, ok := rc.mutation.Topics(); !ok {
		return &ValidationError{Name: "topics", err: errors.New(`ent: missing required field "Reply.topics"`)}
	}
	if _, ok := rc.mutation.Addr(); !ok {
		return &ValidationError{Name: "addr", err: errors.New(`ent: missing required field "Reply.addr"`)}
	}
	return nil
}

func (rc *ReplyCreate) sqlSave(ctx context.Context) (*Reply, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *ReplyCreate) createSpec() (*Reply, *sqlgraph.CreateSpec) {
	var (
		_node = &Reply{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(reply.Table, sqlgraph.NewFieldSpec(reply.FieldID, field.TypeInt64))
	)
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rc.mutation.Message(); ok {
		_spec.SetField(reply.FieldMessage, field.TypeString, value)
		_node.Message = value
	}
	if value, ok := rc.mutation.Ats(); ok {
		_spec.SetField(reply.FieldAts, field.TypeString, value)
		_node.Ats = value
	}
	if value, ok := rc.mutation.IP(); ok {
		_spec.SetField(reply.FieldIP, field.TypeInt64, value)
		_node.IP = value
	}
	if value, ok := rc.mutation.Plat(); ok {
		_spec.SetField(reply.FieldPlat, field.TypeInt8, value)
		_node.Plat = value
	}
	if value, ok := rc.mutation.Device(); ok {
		_spec.SetField(reply.FieldDevice, field.TypeString, value)
		_node.Device = value
	}
	if value, ok := rc.mutation.Version(); ok {
		_spec.SetField(reply.FieldVersion, field.TypeString, value)
		_node.Version = value
	}
	if value, ok := rc.mutation.Ctime(); ok {
		_spec.SetField(reply.FieldCtime, field.TypeTime, value)
		_node.Ctime = value
	}
	if value, ok := rc.mutation.Mtime(); ok {
		_spec.SetField(reply.FieldMtime, field.TypeTime, value)
		_node.Mtime = value
	}
	if value, ok := rc.mutation.Topics(); ok {
		_spec.SetField(reply.FieldTopics, field.TypeString, value)
		_node.Topics = value
	}
	if value, ok := rc.mutation.Addr(); ok {
		_spec.SetField(reply.FieldAddr, field.TypeString, value)
		_node.Addr = value
	}
	return _node, _spec
}

// ReplyCreateBulk is the builder for creating many Reply entities in bulk.
type ReplyCreateBulk struct {
	config
	builders []*ReplyCreate
}

// Save creates the Reply entities in the database.
func (rcb *ReplyCreateBulk) Save(ctx context.Context) ([]*Reply, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Reply, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ReplyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *ReplyCreateBulk) SaveX(ctx context.Context) []*Reply {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *ReplyCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *ReplyCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
