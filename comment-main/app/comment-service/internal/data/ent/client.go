// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"comment-main/app/comment-service/internal/data/ent/migrate"

	"comment-main/app/comment-service/internal/data/ent/reply"
	"comment-main/app/comment-service/internal/data/ent/replyarea"
	"comment-main/app/comment-service/internal/data/ent/replyindex"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Reply is the client for interacting with the Reply builders.
	Reply *ReplyClient
	// ReplyArea is the client for interacting with the ReplyArea builders.
	ReplyArea *ReplyAreaClient
	// ReplyIndex is the client for interacting with the ReplyIndex builders.
	ReplyIndex *ReplyIndexClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Reply = NewReplyClient(c.config)
	c.ReplyArea = NewReplyAreaClient(c.config)
	c.ReplyIndex = NewReplyIndexClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:        ctx,
		config:     cfg,
		Reply:      NewReplyClient(cfg),
		ReplyArea:  NewReplyAreaClient(cfg),
		ReplyIndex: NewReplyIndexClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:        ctx,
		config:     cfg,
		Reply:      NewReplyClient(cfg),
		ReplyArea:  NewReplyAreaClient(cfg),
		ReplyIndex: NewReplyIndexClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Reply.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Reply.Use(hooks...)
	c.ReplyArea.Use(hooks...)
	c.ReplyIndex.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Reply.Intercept(interceptors...)
	c.ReplyArea.Intercept(interceptors...)
	c.ReplyIndex.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *ReplyMutation:
		return c.Reply.mutate(ctx, m)
	case *ReplyAreaMutation:
		return c.ReplyArea.mutate(ctx, m)
	case *ReplyIndexMutation:
		return c.ReplyIndex.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// ReplyClient is a client for the Reply schema.
type ReplyClient struct {
	config
}

// NewReplyClient returns a client for the Reply from the given config.
func NewReplyClient(c config) *ReplyClient {
	return &ReplyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `reply.Hooks(f(g(h())))`.
func (c *ReplyClient) Use(hooks ...Hook) {
	c.hooks.Reply = append(c.hooks.Reply, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `reply.Intercept(f(g(h())))`.
func (c *ReplyClient) Intercept(interceptors ...Interceptor) {
	c.inters.Reply = append(c.inters.Reply, interceptors...)
}

// Create returns a builder for creating a Reply entity.
func (c *ReplyClient) Create() *ReplyCreate {
	mutation := newReplyMutation(c.config, OpCreate)
	return &ReplyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Reply entities.
func (c *ReplyClient) CreateBulk(builders ...*ReplyCreate) *ReplyCreateBulk {
	return &ReplyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Reply.
func (c *ReplyClient) Update() *ReplyUpdate {
	mutation := newReplyMutation(c.config, OpUpdate)
	return &ReplyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ReplyClient) UpdateOne(r *Reply) *ReplyUpdateOne {
	mutation := newReplyMutation(c.config, OpUpdateOne, withReply(r))
	return &ReplyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ReplyClient) UpdateOneID(id int) *ReplyUpdateOne {
	mutation := newReplyMutation(c.config, OpUpdateOne, withReplyID(id))
	return &ReplyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Reply.
func (c *ReplyClient) Delete() *ReplyDelete {
	mutation := newReplyMutation(c.config, OpDelete)
	return &ReplyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ReplyClient) DeleteOne(r *Reply) *ReplyDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ReplyClient) DeleteOneID(id int) *ReplyDeleteOne {
	builder := c.Delete().Where(reply.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ReplyDeleteOne{builder}
}

// Query returns a query builder for Reply.
func (c *ReplyClient) Query() *ReplyQuery {
	return &ReplyQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeReply},
		inters: c.Interceptors(),
	}
}

// Get returns a Reply entity by its id.
func (c *ReplyClient) Get(ctx context.Context, id int) (*Reply, error) {
	return c.Query().Where(reply.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ReplyClient) GetX(ctx context.Context, id int) *Reply {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ReplyClient) Hooks() []Hook {
	return c.hooks.Reply
}

// Interceptors returns the client interceptors.
func (c *ReplyClient) Interceptors() []Interceptor {
	return c.inters.Reply
}

func (c *ReplyClient) mutate(ctx context.Context, m *ReplyMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ReplyCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ReplyUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ReplyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ReplyDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Reply mutation op: %q", m.Op())
	}
}

// ReplyAreaClient is a client for the ReplyArea schema.
type ReplyAreaClient struct {
	config
}

// NewReplyAreaClient returns a client for the ReplyArea from the given config.
func NewReplyAreaClient(c config) *ReplyAreaClient {
	return &ReplyAreaClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `replyarea.Hooks(f(g(h())))`.
func (c *ReplyAreaClient) Use(hooks ...Hook) {
	c.hooks.ReplyArea = append(c.hooks.ReplyArea, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `replyarea.Intercept(f(g(h())))`.
func (c *ReplyAreaClient) Intercept(interceptors ...Interceptor) {
	c.inters.ReplyArea = append(c.inters.ReplyArea, interceptors...)
}

// Create returns a builder for creating a ReplyArea entity.
func (c *ReplyAreaClient) Create() *ReplyAreaCreate {
	mutation := newReplyAreaMutation(c.config, OpCreate)
	return &ReplyAreaCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ReplyArea entities.
func (c *ReplyAreaClient) CreateBulk(builders ...*ReplyAreaCreate) *ReplyAreaCreateBulk {
	return &ReplyAreaCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ReplyArea.
func (c *ReplyAreaClient) Update() *ReplyAreaUpdate {
	mutation := newReplyAreaMutation(c.config, OpUpdate)
	return &ReplyAreaUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ReplyAreaClient) UpdateOne(ra *ReplyArea) *ReplyAreaUpdateOne {
	mutation := newReplyAreaMutation(c.config, OpUpdateOne, withReplyArea(ra))
	return &ReplyAreaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ReplyAreaClient) UpdateOneID(id int64) *ReplyAreaUpdateOne {
	mutation := newReplyAreaMutation(c.config, OpUpdateOne, withReplyAreaID(id))
	return &ReplyAreaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ReplyArea.
func (c *ReplyAreaClient) Delete() *ReplyAreaDelete {
	mutation := newReplyAreaMutation(c.config, OpDelete)
	return &ReplyAreaDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ReplyAreaClient) DeleteOne(ra *ReplyArea) *ReplyAreaDeleteOne {
	return c.DeleteOneID(ra.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ReplyAreaClient) DeleteOneID(id int64) *ReplyAreaDeleteOne {
	builder := c.Delete().Where(replyarea.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ReplyAreaDeleteOne{builder}
}

// Query returns a query builder for ReplyArea.
func (c *ReplyAreaClient) Query() *ReplyAreaQuery {
	return &ReplyAreaQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeReplyArea},
		inters: c.Interceptors(),
	}
}

// Get returns a ReplyArea entity by its id.
func (c *ReplyAreaClient) Get(ctx context.Context, id int64) (*ReplyArea, error) {
	return c.Query().Where(replyarea.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ReplyAreaClient) GetX(ctx context.Context, id int64) *ReplyArea {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ReplyAreaClient) Hooks() []Hook {
	return c.hooks.ReplyArea
}

// Interceptors returns the client interceptors.
func (c *ReplyAreaClient) Interceptors() []Interceptor {
	return c.inters.ReplyArea
}

func (c *ReplyAreaClient) mutate(ctx context.Context, m *ReplyAreaMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ReplyAreaCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ReplyAreaUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ReplyAreaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ReplyAreaDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ReplyArea mutation op: %q", m.Op())
	}
}

// ReplyIndexClient is a client for the ReplyIndex schema.
type ReplyIndexClient struct {
	config
}

// NewReplyIndexClient returns a client for the ReplyIndex from the given config.
func NewReplyIndexClient(c config) *ReplyIndexClient {
	return &ReplyIndexClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `replyindex.Hooks(f(g(h())))`.
func (c *ReplyIndexClient) Use(hooks ...Hook) {
	c.hooks.ReplyIndex = append(c.hooks.ReplyIndex, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `replyindex.Intercept(f(g(h())))`.
func (c *ReplyIndexClient) Intercept(interceptors ...Interceptor) {
	c.inters.ReplyIndex = append(c.inters.ReplyIndex, interceptors...)
}

// Create returns a builder for creating a ReplyIndex entity.
func (c *ReplyIndexClient) Create() *ReplyIndexCreate {
	mutation := newReplyIndexMutation(c.config, OpCreate)
	return &ReplyIndexCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ReplyIndex entities.
func (c *ReplyIndexClient) CreateBulk(builders ...*ReplyIndexCreate) *ReplyIndexCreateBulk {
	return &ReplyIndexCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ReplyIndex.
func (c *ReplyIndexClient) Update() *ReplyIndexUpdate {
	mutation := newReplyIndexMutation(c.config, OpUpdate)
	return &ReplyIndexUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ReplyIndexClient) UpdateOne(ri *ReplyIndex) *ReplyIndexUpdateOne {
	mutation := newReplyIndexMutation(c.config, OpUpdateOne, withReplyIndex(ri))
	return &ReplyIndexUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ReplyIndexClient) UpdateOneID(id int64) *ReplyIndexUpdateOne {
	mutation := newReplyIndexMutation(c.config, OpUpdateOne, withReplyIndexID(id))
	return &ReplyIndexUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ReplyIndex.
func (c *ReplyIndexClient) Delete() *ReplyIndexDelete {
	mutation := newReplyIndexMutation(c.config, OpDelete)
	return &ReplyIndexDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ReplyIndexClient) DeleteOne(ri *ReplyIndex) *ReplyIndexDeleteOne {
	return c.DeleteOneID(ri.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ReplyIndexClient) DeleteOneID(id int64) *ReplyIndexDeleteOne {
	builder := c.Delete().Where(replyindex.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ReplyIndexDeleteOne{builder}
}

// Query returns a query builder for ReplyIndex.
func (c *ReplyIndexClient) Query() *ReplyIndexQuery {
	return &ReplyIndexQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeReplyIndex},
		inters: c.Interceptors(),
	}
}

// Get returns a ReplyIndex entity by its id.
func (c *ReplyIndexClient) Get(ctx context.Context, id int64) (*ReplyIndex, error) {
	return c.Query().Where(replyindex.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ReplyIndexClient) GetX(ctx context.Context, id int64) *ReplyIndex {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ReplyIndexClient) Hooks() []Hook {
	return c.hooks.ReplyIndex
}

// Interceptors returns the client interceptors.
func (c *ReplyIndexClient) Interceptors() []Interceptor {
	return c.inters.ReplyIndex
}

func (c *ReplyIndexClient) mutate(ctx context.Context, m *ReplyIndexMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ReplyIndexCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ReplyIndexUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ReplyIndexUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ReplyIndexDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ReplyIndex mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Reply, ReplyArea, ReplyIndex []ent.Hook
	}
	inters struct {
		Reply, ReplyArea, ReplyIndex []ent.Interceptor
	}
)
