// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: api/commentService/v1/commentService.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CommentService_CreateReply_FullMethodName      = "/api.comment.service.v1.CommentService/CreateReply"
	CommentService_UpdateReply_FullMethodName      = "/api.comment.service.v1.CommentService/UpdateReply"
	CommentService_DeleteReply_FullMethodName      = "/api.comment.service.v1.CommentService/DeleteReply"
	CommentService_GetReply_FullMethodName         = "/api.comment.service.v1.CommentService/GetReply"
	CommentService_ListReply_FullMethodName        = "/api.comment.service.v1.CommentService/ListReply"
	CommentService_CreateReplyIndex_FullMethodName = "/api.comment.service.v1.CommentService/CreateReplyIndex"
	CommentService_UpdateReplyIndex_FullMethodName = "/api.comment.service.v1.CommentService/UpdateReplyIndex"
	CommentService_DeleteReplyIndex_FullMethodName = "/api.comment.service.v1.CommentService/DeleteReplyIndex"
	CommentService_GetReplyIndex_FullMethodName    = "/api.comment.service.v1.CommentService/GetReplyIndex"
	CommentService_ListReplyIndex_FullMethodName   = "/api.comment.service.v1.CommentService/ListReplyIndex"
	CommentService_CreateReplyArea_FullMethodName  = "/api.comment.service.v1.CommentService/CreateReplyArea"
	CommentService_UpdateReplyArea_FullMethodName  = "/api.comment.service.v1.CommentService/UpdateReplyArea"
	CommentService_DeleteReplyArea_FullMethodName  = "/api.comment.service.v1.CommentService/DeleteReplyArea"
	CommentService_GetReplyArea_FullMethodName     = "/api.comment.service.v1.CommentService/GetReplyArea"
	CommentService_ListReplyArea_FullMethodName    = "/api.comment.service.v1.CommentService/ListReplyArea"
)

// CommentServiceClient is the client API for CommentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommentServiceClient interface {
	// 评论内容
	CreateReply(ctx context.Context, in *CreateReplyRequest, opts ...grpc.CallOption) (*CreateReplyReply, error)
	UpdateReply(ctx context.Context, in *UpdateReplyRequest, opts ...grpc.CallOption) (*UpdateReplyReply, error)
	DeleteReply(ctx context.Context, in *DeleteReplyRequest, opts ...grpc.CallOption) (*DeleteReplyReply, error)
	GetReply(ctx context.Context, in *GetReplyRequest, opts ...grpc.CallOption) (*GetReplyReply, error)
	ListReply(ctx context.Context, in *ListReplyRequest, opts ...grpc.CallOption) (*ListReplyReply, error)
	// 评论索引
	CreateReplyIndex(ctx context.Context, in *CreateReplyIndexRequest, opts ...grpc.CallOption) (*CreateReplyIndexReply, error)
	UpdateReplyIndex(ctx context.Context, in *UpdateReplyIndexRequest, opts ...grpc.CallOption) (*UpdateReplyIndexReply, error)
	DeleteReplyIndex(ctx context.Context, in *DeleteReplyIndexRequest, opts ...grpc.CallOption) (*DeleteReplyIndexReply, error)
	GetReplyIndex(ctx context.Context, in *GetReplyIndexRequest, opts ...grpc.CallOption) (*GetReplyIndexReply, error)
	ListReplyIndex(ctx context.Context, in *ListReplyIndexRequest, opts ...grpc.CallOption) (*ListReplyIndexReply, error)
	// 评论区
	CreateReplyArea(ctx context.Context, in *CreateReplyIndexRequest, opts ...grpc.CallOption) (*CreateReplyAreaReply, error)
	UpdateReplyArea(ctx context.Context, in *UpdateReplyAreaRequest, opts ...grpc.CallOption) (*UpdateReplyAreaReply, error)
	DeleteReplyArea(ctx context.Context, in *DeleteReplyAreaRequest, opts ...grpc.CallOption) (*DeleteReplyAreaReply, error)
	GetReplyArea(ctx context.Context, in *GetReplyAreaRequest, opts ...grpc.CallOption) (*GetReplyAreaReply, error)
	ListReplyArea(ctx context.Context, in *ListReplyAreaRequest, opts ...grpc.CallOption) (*ListReplyAreaReply, error)
}

type commentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommentServiceClient(cc grpc.ClientConnInterface) CommentServiceClient {
	return &commentServiceClient{cc}
}

func (c *commentServiceClient) CreateReply(ctx context.Context, in *CreateReplyRequest, opts ...grpc.CallOption) (*CreateReplyReply, error) {
	out := new(CreateReplyReply)
	err := c.cc.Invoke(ctx, CommentService_CreateReply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) UpdateReply(ctx context.Context, in *UpdateReplyRequest, opts ...grpc.CallOption) (*UpdateReplyReply, error) {
	out := new(UpdateReplyReply)
	err := c.cc.Invoke(ctx, CommentService_UpdateReply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) DeleteReply(ctx context.Context, in *DeleteReplyRequest, opts ...grpc.CallOption) (*DeleteReplyReply, error) {
	out := new(DeleteReplyReply)
	err := c.cc.Invoke(ctx, CommentService_DeleteReply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) GetReply(ctx context.Context, in *GetReplyRequest, opts ...grpc.CallOption) (*GetReplyReply, error) {
	out := new(GetReplyReply)
	err := c.cc.Invoke(ctx, CommentService_GetReply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) ListReply(ctx context.Context, in *ListReplyRequest, opts ...grpc.CallOption) (*ListReplyReply, error) {
	out := new(ListReplyReply)
	err := c.cc.Invoke(ctx, CommentService_ListReply_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) CreateReplyIndex(ctx context.Context, in *CreateReplyIndexRequest, opts ...grpc.CallOption) (*CreateReplyIndexReply, error) {
	out := new(CreateReplyIndexReply)
	err := c.cc.Invoke(ctx, CommentService_CreateReplyIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) UpdateReplyIndex(ctx context.Context, in *UpdateReplyIndexRequest, opts ...grpc.CallOption) (*UpdateReplyIndexReply, error) {
	out := new(UpdateReplyIndexReply)
	err := c.cc.Invoke(ctx, CommentService_UpdateReplyIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) DeleteReplyIndex(ctx context.Context, in *DeleteReplyIndexRequest, opts ...grpc.CallOption) (*DeleteReplyIndexReply, error) {
	out := new(DeleteReplyIndexReply)
	err := c.cc.Invoke(ctx, CommentService_DeleteReplyIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) GetReplyIndex(ctx context.Context, in *GetReplyIndexRequest, opts ...grpc.CallOption) (*GetReplyIndexReply, error) {
	out := new(GetReplyIndexReply)
	err := c.cc.Invoke(ctx, CommentService_GetReplyIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) ListReplyIndex(ctx context.Context, in *ListReplyIndexRequest, opts ...grpc.CallOption) (*ListReplyIndexReply, error) {
	out := new(ListReplyIndexReply)
	err := c.cc.Invoke(ctx, CommentService_ListReplyIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) CreateReplyArea(ctx context.Context, in *CreateReplyIndexRequest, opts ...grpc.CallOption) (*CreateReplyAreaReply, error) {
	out := new(CreateReplyAreaReply)
	err := c.cc.Invoke(ctx, CommentService_CreateReplyArea_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) UpdateReplyArea(ctx context.Context, in *UpdateReplyAreaRequest, opts ...grpc.CallOption) (*UpdateReplyAreaReply, error) {
	out := new(UpdateReplyAreaReply)
	err := c.cc.Invoke(ctx, CommentService_UpdateReplyArea_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) DeleteReplyArea(ctx context.Context, in *DeleteReplyAreaRequest, opts ...grpc.CallOption) (*DeleteReplyAreaReply, error) {
	out := new(DeleteReplyAreaReply)
	err := c.cc.Invoke(ctx, CommentService_DeleteReplyArea_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) GetReplyArea(ctx context.Context, in *GetReplyAreaRequest, opts ...grpc.CallOption) (*GetReplyAreaReply, error) {
	out := new(GetReplyAreaReply)
	err := c.cc.Invoke(ctx, CommentService_GetReplyArea_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentServiceClient) ListReplyArea(ctx context.Context, in *ListReplyAreaRequest, opts ...grpc.CallOption) (*ListReplyAreaReply, error) {
	out := new(ListReplyAreaReply)
	err := c.cc.Invoke(ctx, CommentService_ListReplyArea_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommentServiceServer is the server API for CommentService service.
// All implementations must embed UnimplementedCommentServiceServer
// for forward compatibility
type CommentServiceServer interface {
	// 评论内容
	CreateReply(context.Context, *CreateReplyRequest) (*CreateReplyReply, error)
	UpdateReply(context.Context, *UpdateReplyRequest) (*UpdateReplyReply, error)
	DeleteReply(context.Context, *DeleteReplyRequest) (*DeleteReplyReply, error)
	GetReply(context.Context, *GetReplyRequest) (*GetReplyReply, error)
	ListReply(context.Context, *ListReplyRequest) (*ListReplyReply, error)
	// 评论索引
	CreateReplyIndex(context.Context, *CreateReplyIndexRequest) (*CreateReplyIndexReply, error)
	UpdateReplyIndex(context.Context, *UpdateReplyIndexRequest) (*UpdateReplyIndexReply, error)
	DeleteReplyIndex(context.Context, *DeleteReplyIndexRequest) (*DeleteReplyIndexReply, error)
	GetReplyIndex(context.Context, *GetReplyIndexRequest) (*GetReplyIndexReply, error)
	ListReplyIndex(context.Context, *ListReplyIndexRequest) (*ListReplyIndexReply, error)
	// 评论区
	CreateReplyArea(context.Context, *CreateReplyIndexRequest) (*CreateReplyAreaReply, error)
	UpdateReplyArea(context.Context, *UpdateReplyAreaRequest) (*UpdateReplyAreaReply, error)
	DeleteReplyArea(context.Context, *DeleteReplyAreaRequest) (*DeleteReplyAreaReply, error)
	GetReplyArea(context.Context, *GetReplyAreaRequest) (*GetReplyAreaReply, error)
	ListReplyArea(context.Context, *ListReplyAreaRequest) (*ListReplyAreaReply, error)
	mustEmbedUnimplementedCommentServiceServer()
}

// UnimplementedCommentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCommentServiceServer struct {
}

func (UnimplementedCommentServiceServer) CreateReply(context.Context, *CreateReplyRequest) (*CreateReplyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReply not implemented")
}
func (UnimplementedCommentServiceServer) UpdateReply(context.Context, *UpdateReplyRequest) (*UpdateReplyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReply not implemented")
}
func (UnimplementedCommentServiceServer) DeleteReply(context.Context, *DeleteReplyRequest) (*DeleteReplyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReply not implemented")
}
func (UnimplementedCommentServiceServer) GetReply(context.Context, *GetReplyRequest) (*GetReplyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReply not implemented")
}
func (UnimplementedCommentServiceServer) ListReply(context.Context, *ListReplyRequest) (*ListReplyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReply not implemented")
}
func (UnimplementedCommentServiceServer) CreateReplyIndex(context.Context, *CreateReplyIndexRequest) (*CreateReplyIndexReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReplyIndex not implemented")
}
func (UnimplementedCommentServiceServer) UpdateReplyIndex(context.Context, *UpdateReplyIndexRequest) (*UpdateReplyIndexReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReplyIndex not implemented")
}
func (UnimplementedCommentServiceServer) DeleteReplyIndex(context.Context, *DeleteReplyIndexRequest) (*DeleteReplyIndexReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReplyIndex not implemented")
}
func (UnimplementedCommentServiceServer) GetReplyIndex(context.Context, *GetReplyIndexRequest) (*GetReplyIndexReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReplyIndex not implemented")
}
func (UnimplementedCommentServiceServer) ListReplyIndex(context.Context, *ListReplyIndexRequest) (*ListReplyIndexReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReplyIndex not implemented")
}
func (UnimplementedCommentServiceServer) CreateReplyArea(context.Context, *CreateReplyIndexRequest) (*CreateReplyAreaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReplyArea not implemented")
}
func (UnimplementedCommentServiceServer) UpdateReplyArea(context.Context, *UpdateReplyAreaRequest) (*UpdateReplyAreaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReplyArea not implemented")
}
func (UnimplementedCommentServiceServer) DeleteReplyArea(context.Context, *DeleteReplyAreaRequest) (*DeleteReplyAreaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReplyArea not implemented")
}
func (UnimplementedCommentServiceServer) GetReplyArea(context.Context, *GetReplyAreaRequest) (*GetReplyAreaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReplyArea not implemented")
}
func (UnimplementedCommentServiceServer) ListReplyArea(context.Context, *ListReplyAreaRequest) (*ListReplyAreaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReplyArea not implemented")
}
func (UnimplementedCommentServiceServer) mustEmbedUnimplementedCommentServiceServer() {}

// UnsafeCommentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommentServiceServer will
// result in compilation errors.
type UnsafeCommentServiceServer interface {
	mustEmbedUnimplementedCommentServiceServer()
}

func RegisterCommentServiceServer(s grpc.ServiceRegistrar, srv CommentServiceServer) {
	s.RegisterService(&CommentService_ServiceDesc, srv)
}

func _CommentService_CreateReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).CreateReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_CreateReply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).CreateReply(ctx, req.(*CreateReplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_UpdateReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).UpdateReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_UpdateReply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).UpdateReply(ctx, req.(*UpdateReplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_DeleteReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).DeleteReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_DeleteReply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).DeleteReply(ctx, req.(*DeleteReplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_GetReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).GetReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_GetReply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).GetReply(ctx, req.(*GetReplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_ListReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).ListReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_ListReply_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).ListReply(ctx, req.(*ListReplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_CreateReplyIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReplyIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).CreateReplyIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_CreateReplyIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).CreateReplyIndex(ctx, req.(*CreateReplyIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_UpdateReplyIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReplyIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).UpdateReplyIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_UpdateReplyIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).UpdateReplyIndex(ctx, req.(*UpdateReplyIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_DeleteReplyIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReplyIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).DeleteReplyIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_DeleteReplyIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).DeleteReplyIndex(ctx, req.(*DeleteReplyIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_GetReplyIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReplyIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).GetReplyIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_GetReplyIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).GetReplyIndex(ctx, req.(*GetReplyIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_ListReplyIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReplyIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).ListReplyIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_ListReplyIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).ListReplyIndex(ctx, req.(*ListReplyIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_CreateReplyArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReplyIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).CreateReplyArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_CreateReplyArea_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).CreateReplyArea(ctx, req.(*CreateReplyIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_UpdateReplyArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReplyAreaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).UpdateReplyArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_UpdateReplyArea_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).UpdateReplyArea(ctx, req.(*UpdateReplyAreaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_DeleteReplyArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReplyAreaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).DeleteReplyArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_DeleteReplyArea_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).DeleteReplyArea(ctx, req.(*DeleteReplyAreaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_GetReplyArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReplyAreaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).GetReplyArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_GetReplyArea_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).GetReplyArea(ctx, req.(*GetReplyAreaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentService_ListReplyArea_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReplyAreaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentServiceServer).ListReplyArea(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommentService_ListReplyArea_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentServiceServer).ListReplyArea(ctx, req.(*ListReplyAreaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CommentService_ServiceDesc is the grpc.ServiceDesc for CommentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.comment.service.v1.CommentService",
	HandlerType: (*CommentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateReply",
			Handler:    _CommentService_CreateReply_Handler,
		},
		{
			MethodName: "UpdateReply",
			Handler:    _CommentService_UpdateReply_Handler,
		},
		{
			MethodName: "DeleteReply",
			Handler:    _CommentService_DeleteReply_Handler,
		},
		{
			MethodName: "GetReply",
			Handler:    _CommentService_GetReply_Handler,
		},
		{
			MethodName: "ListReply",
			Handler:    _CommentService_ListReply_Handler,
		},
		{
			MethodName: "CreateReplyIndex",
			Handler:    _CommentService_CreateReplyIndex_Handler,
		},
		{
			MethodName: "UpdateReplyIndex",
			Handler:    _CommentService_UpdateReplyIndex_Handler,
		},
		{
			MethodName: "DeleteReplyIndex",
			Handler:    _CommentService_DeleteReplyIndex_Handler,
		},
		{
			MethodName: "GetReplyIndex",
			Handler:    _CommentService_GetReplyIndex_Handler,
		},
		{
			MethodName: "ListReplyIndex",
			Handler:    _CommentService_ListReplyIndex_Handler,
		},
		{
			MethodName: "CreateReplyArea",
			Handler:    _CommentService_CreateReplyArea_Handler,
		},
		{
			MethodName: "UpdateReplyArea",
			Handler:    _CommentService_UpdateReplyArea_Handler,
		},
		{
			MethodName: "DeleteReplyArea",
			Handler:    _CommentService_DeleteReplyArea_Handler,
		},
		{
			MethodName: "GetReplyArea",
			Handler:    _CommentService_GetReplyArea_Handler,
		},
		{
			MethodName: "ListReplyArea",
			Handler:    _CommentService_ListReplyArea_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/commentService/v1/commentService.proto",
}
