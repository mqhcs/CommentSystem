// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AccountServiceClient is the client API for AccountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountServiceClient interface {
	CreateAccountService(ctx context.Context, in *CreateAccountServiceRequest, opts ...grpc.CallOption) (*CreateAccountServiceReply, error)
	UpdateAccountService(ctx context.Context, in *UpdateAccountServiceRequest, opts ...grpc.CallOption) (*UpdateAccountServiceReply, error)
	DeleteAccountService(ctx context.Context, in *DeleteAccountServiceRequest, opts ...grpc.CallOption) (*DeleteAccountServiceReply, error)
	GetAccountService(ctx context.Context, in *GetAccountServiceRequest, opts ...grpc.CallOption) (*GetAccountServiceReply, error)
	ListAccountService(ctx context.Context, in *ListAccountServiceRequest, opts ...grpc.CallOption) (*ListAccountServiceReply, error)
}

type accountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountServiceClient(cc grpc.ClientConnInterface) AccountServiceClient {
	return &accountServiceClient{cc}
}

func (c *accountServiceClient) CreateAccountService(ctx context.Context, in *CreateAccountServiceRequest, opts ...grpc.CallOption) (*CreateAccountServiceReply, error) {
	out := new(CreateAccountServiceReply)
	err := c.cc.Invoke(ctx, "/api.account.service.v1.AccountService/CreateAccountService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) UpdateAccountService(ctx context.Context, in *UpdateAccountServiceRequest, opts ...grpc.CallOption) (*UpdateAccountServiceReply, error) {
	out := new(UpdateAccountServiceReply)
	err := c.cc.Invoke(ctx, "/api.account.service.v1.AccountService/UpdateAccountService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) DeleteAccountService(ctx context.Context, in *DeleteAccountServiceRequest, opts ...grpc.CallOption) (*DeleteAccountServiceReply, error) {
	out := new(DeleteAccountServiceReply)
	err := c.cc.Invoke(ctx, "/api.account.service.v1.AccountService/DeleteAccountService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) GetAccountService(ctx context.Context, in *GetAccountServiceRequest, opts ...grpc.CallOption) (*GetAccountServiceReply, error) {
	out := new(GetAccountServiceReply)
	err := c.cc.Invoke(ctx, "/api.account.service.v1.AccountService/GetAccountService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) ListAccountService(ctx context.Context, in *ListAccountServiceRequest, opts ...grpc.CallOption) (*ListAccountServiceReply, error) {
	out := new(ListAccountServiceReply)
	err := c.cc.Invoke(ctx, "/api.account.service.v1.AccountService/ListAccountService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountServiceServer is the server API for AccountService service.
// All implementations must embed UnimplementedAccountServiceServer
// for forward compatibility
type AccountServiceServer interface {
	CreateAccountService(context.Context, *CreateAccountServiceRequest) (*CreateAccountServiceReply, error)
	UpdateAccountService(context.Context, *UpdateAccountServiceRequest) (*UpdateAccountServiceReply, error)
	DeleteAccountService(context.Context, *DeleteAccountServiceRequest) (*DeleteAccountServiceReply, error)
	GetAccountService(context.Context, *GetAccountServiceRequest) (*GetAccountServiceReply, error)
	ListAccountService(context.Context, *ListAccountServiceRequest) (*ListAccountServiceReply, error)
	mustEmbedUnimplementedAccountServiceServer()
}

// UnimplementedAccountServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAccountServiceServer struct {
}

func (UnimplementedAccountServiceServer) CreateAccountService(context.Context, *CreateAccountServiceRequest) (*CreateAccountServiceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccountService not implemented")
}
func (UnimplementedAccountServiceServer) UpdateAccountService(context.Context, *UpdateAccountServiceRequest) (*UpdateAccountServiceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccountService not implemented")
}
func (UnimplementedAccountServiceServer) DeleteAccountService(context.Context, *DeleteAccountServiceRequest) (*DeleteAccountServiceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAccountService not implemented")
}
func (UnimplementedAccountServiceServer) GetAccountService(context.Context, *GetAccountServiceRequest) (*GetAccountServiceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountService not implemented")
}
func (UnimplementedAccountServiceServer) ListAccountService(context.Context, *ListAccountServiceRequest) (*ListAccountServiceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAccountService not implemented")
}
func (UnimplementedAccountServiceServer) mustEmbedUnimplementedAccountServiceServer() {}

// UnsafeAccountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountServiceServer will
// result in compilation errors.
type UnsafeAccountServiceServer interface {
	mustEmbedUnimplementedAccountServiceServer()
}

func RegisterAccountServiceServer(s grpc.ServiceRegistrar, srv AccountServiceServer) {
	s.RegisterService(&AccountService_ServiceDesc, srv)
}

func _AccountService_CreateAccountService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).CreateAccountService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.account.service.v1.AccountService/CreateAccountService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).CreateAccountService(ctx, req.(*CreateAccountServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_UpdateAccountService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).UpdateAccountService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.account.service.v1.AccountService/UpdateAccountService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).UpdateAccountService(ctx, req.(*UpdateAccountServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_DeleteAccountService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).DeleteAccountService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.account.service.v1.AccountService/DeleteAccountService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).DeleteAccountService(ctx, req.(*DeleteAccountServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_GetAccountService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).GetAccountService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.account.service.v1.AccountService/GetAccountService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).GetAccountService(ctx, req.(*GetAccountServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_ListAccountService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccountServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).ListAccountService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.account.service.v1.AccountService/ListAccountService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).ListAccountService(ctx, req.(*ListAccountServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountService_ServiceDesc is the grpc.ServiceDesc for AccountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.account.service.v1.AccountService",
	HandlerType: (*AccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAccountService",
			Handler:    _AccountService_CreateAccountService_Handler,
		},
		{
			MethodName: "UpdateAccountService",
			Handler:    _AccountService_UpdateAccountService_Handler,
		},
		{
			MethodName: "DeleteAccountService",
			Handler:    _AccountService_DeleteAccountService_Handler,
		},
		{
			MethodName: "GetAccountService",
			Handler:    _AccountService_GetAccountService_Handler,
		},
		{
			MethodName: "ListAccountService",
			Handler:    _AccountService_ListAccountService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/accountService/v1/accountService.proto",
}
