// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CommentAdminClient is the client API for CommentAdmin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommentAdminClient interface {
	CreateCommentAdmin(ctx context.Context, in *CreateCommentAdminRequest, opts ...grpc.CallOption) (*CreateCommentAdminReply, error)
	UpdateCommentAdmin(ctx context.Context, in *UpdateCommentAdminRequest, opts ...grpc.CallOption) (*UpdateCommentAdminReply, error)
	DeleteCommentAdmin(ctx context.Context, in *DeleteCommentAdminRequest, opts ...grpc.CallOption) (*DeleteCommentAdminReply, error)
	GetCommentAdmin(ctx context.Context, in *GetCommentAdminRequest, opts ...grpc.CallOption) (*GetCommentAdminReply, error)
	ListCommentAdmin(ctx context.Context, in *ListCommentAdminRequest, opts ...grpc.CallOption) (*ListCommentAdminReply, error)
}

type commentAdminClient struct {
	cc grpc.ClientConnInterface
}

func NewCommentAdminClient(cc grpc.ClientConnInterface) CommentAdminClient {
	return &commentAdminClient{cc}
}

func (c *commentAdminClient) CreateCommentAdmin(ctx context.Context, in *CreateCommentAdminRequest, opts ...grpc.CallOption) (*CreateCommentAdminReply, error) {
	out := new(CreateCommentAdminReply)
	err := c.cc.Invoke(ctx, "/api.comment.admin.v1.CommentAdmin/CreateCommentAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentAdminClient) UpdateCommentAdmin(ctx context.Context, in *UpdateCommentAdminRequest, opts ...grpc.CallOption) (*UpdateCommentAdminReply, error) {
	out := new(UpdateCommentAdminReply)
	err := c.cc.Invoke(ctx, "/api.comment.admin.v1.CommentAdmin/UpdateCommentAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentAdminClient) DeleteCommentAdmin(ctx context.Context, in *DeleteCommentAdminRequest, opts ...grpc.CallOption) (*DeleteCommentAdminReply, error) {
	out := new(DeleteCommentAdminReply)
	err := c.cc.Invoke(ctx, "/api.comment.admin.v1.CommentAdmin/DeleteCommentAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentAdminClient) GetCommentAdmin(ctx context.Context, in *GetCommentAdminRequest, opts ...grpc.CallOption) (*GetCommentAdminReply, error) {
	out := new(GetCommentAdminReply)
	err := c.cc.Invoke(ctx, "/api.comment.admin.v1.CommentAdmin/GetCommentAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentAdminClient) ListCommentAdmin(ctx context.Context, in *ListCommentAdminRequest, opts ...grpc.CallOption) (*ListCommentAdminReply, error) {
	out := new(ListCommentAdminReply)
	err := c.cc.Invoke(ctx, "/api.comment.admin.v1.CommentAdmin/ListCommentAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommentAdminServer is the server API for CommentAdmin service.
// All implementations must embed UnimplementedCommentAdminServer
// for forward compatibility
type CommentAdminServer interface {
	CreateCommentAdmin(context.Context, *CreateCommentAdminRequest) (*CreateCommentAdminReply, error)
	UpdateCommentAdmin(context.Context, *UpdateCommentAdminRequest) (*UpdateCommentAdminReply, error)
	DeleteCommentAdmin(context.Context, *DeleteCommentAdminRequest) (*DeleteCommentAdminReply, error)
	GetCommentAdmin(context.Context, *GetCommentAdminRequest) (*GetCommentAdminReply, error)
	ListCommentAdmin(context.Context, *ListCommentAdminRequest) (*ListCommentAdminReply, error)
	mustEmbedUnimplementedCommentAdminServer()
}

// UnimplementedCommentAdminServer must be embedded to have forward compatible implementations.
type UnimplementedCommentAdminServer struct {
}

func (UnimplementedCommentAdminServer) CreateCommentAdmin(context.Context, *CreateCommentAdminRequest) (*CreateCommentAdminReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCommentAdmin not implemented")
}
func (UnimplementedCommentAdminServer) UpdateCommentAdmin(context.Context, *UpdateCommentAdminRequest) (*UpdateCommentAdminReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCommentAdmin not implemented")
}
func (UnimplementedCommentAdminServer) DeleteCommentAdmin(context.Context, *DeleteCommentAdminRequest) (*DeleteCommentAdminReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCommentAdmin not implemented")
}
func (UnimplementedCommentAdminServer) GetCommentAdmin(context.Context, *GetCommentAdminRequest) (*GetCommentAdminReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentAdmin not implemented")
}
func (UnimplementedCommentAdminServer) ListCommentAdmin(context.Context, *ListCommentAdminRequest) (*ListCommentAdminReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCommentAdmin not implemented")
}
func (UnimplementedCommentAdminServer) mustEmbedUnimplementedCommentAdminServer() {}

// UnsafeCommentAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommentAdminServer will
// result in compilation errors.
type UnsafeCommentAdminServer interface {
	mustEmbedUnimplementedCommentAdminServer()
}

func RegisterCommentAdminServer(s grpc.ServiceRegistrar, srv CommentAdminServer) {
	s.RegisterService(&CommentAdmin_ServiceDesc, srv)
}

func _CommentAdmin_CreateCommentAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommentAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentAdminServer).CreateCommentAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.comment.admin.v1.CommentAdmin/CreateCommentAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentAdminServer).CreateCommentAdmin(ctx, req.(*CreateCommentAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentAdmin_UpdateCommentAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCommentAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentAdminServer).UpdateCommentAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.comment.admin.v1.CommentAdmin/UpdateCommentAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentAdminServer).UpdateCommentAdmin(ctx, req.(*UpdateCommentAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentAdmin_DeleteCommentAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommentAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentAdminServer).DeleteCommentAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.comment.admin.v1.CommentAdmin/DeleteCommentAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentAdminServer).DeleteCommentAdmin(ctx, req.(*DeleteCommentAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentAdmin_GetCommentAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentAdminServer).GetCommentAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.comment.admin.v1.CommentAdmin/GetCommentAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentAdminServer).GetCommentAdmin(ctx, req.(*GetCommentAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentAdmin_ListCommentAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommentAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentAdminServer).ListCommentAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.comment.admin.v1.CommentAdmin/ListCommentAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentAdminServer).ListCommentAdmin(ctx, req.(*ListCommentAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CommentAdmin_ServiceDesc is the grpc.ServiceDesc for CommentAdmin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommentAdmin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.comment.admin.v1.CommentAdmin",
	HandlerType: (*CommentAdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCommentAdmin",
			Handler:    _CommentAdmin_CreateCommentAdmin_Handler,
		},
		{
			MethodName: "UpdateCommentAdmin",
			Handler:    _CommentAdmin_UpdateCommentAdmin_Handler,
		},
		{
			MethodName: "DeleteCommentAdmin",
			Handler:    _CommentAdmin_DeleteCommentAdmin_Handler,
		},
		{
			MethodName: "GetCommentAdmin",
			Handler:    _CommentAdmin_GetCommentAdmin_Handler,
		},
		{
			MethodName: "ListCommentAdmin",
			Handler:    _CommentAdmin_ListCommentAdmin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/commentAdmin/v1/commentAdmin.proto",
}
