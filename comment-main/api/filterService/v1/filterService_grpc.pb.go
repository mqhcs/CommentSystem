// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FilterServiceClient is the client API for FilterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FilterServiceClient interface {
	CreateFilterService(ctx context.Context, in *CreateFilterServiceRequest, opts ...grpc.CallOption) (*CreateFilterServiceReply, error)
	UpdateFilterService(ctx context.Context, in *UpdateFilterServiceRequest, opts ...grpc.CallOption) (*UpdateFilterServiceReply, error)
	DeleteFilterService(ctx context.Context, in *DeleteFilterServiceRequest, opts ...grpc.CallOption) (*DeleteFilterServiceReply, error)
	GetFilterService(ctx context.Context, in *GetFilterServiceRequest, opts ...grpc.CallOption) (*GetFilterServiceReply, error)
	ListFilterService(ctx context.Context, in *ListFilterServiceRequest, opts ...grpc.CallOption) (*ListFilterServiceReply, error)
}

type filterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFilterServiceClient(cc grpc.ClientConnInterface) FilterServiceClient {
	return &filterServiceClient{cc}
}

func (c *filterServiceClient) CreateFilterService(ctx context.Context, in *CreateFilterServiceRequest, opts ...grpc.CallOption) (*CreateFilterServiceReply, error) {
	out := new(CreateFilterServiceReply)
	err := c.cc.Invoke(ctx, "/api.filter.service.v1.FilterService/CreateFilterService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filterServiceClient) UpdateFilterService(ctx context.Context, in *UpdateFilterServiceRequest, opts ...grpc.CallOption) (*UpdateFilterServiceReply, error) {
	out := new(UpdateFilterServiceReply)
	err := c.cc.Invoke(ctx, "/api.filter.service.v1.FilterService/UpdateFilterService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filterServiceClient) DeleteFilterService(ctx context.Context, in *DeleteFilterServiceRequest, opts ...grpc.CallOption) (*DeleteFilterServiceReply, error) {
	out := new(DeleteFilterServiceReply)
	err := c.cc.Invoke(ctx, "/api.filter.service.v1.FilterService/DeleteFilterService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filterServiceClient) GetFilterService(ctx context.Context, in *GetFilterServiceRequest, opts ...grpc.CallOption) (*GetFilterServiceReply, error) {
	out := new(GetFilterServiceReply)
	err := c.cc.Invoke(ctx, "/api.filter.service.v1.FilterService/GetFilterService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filterServiceClient) ListFilterService(ctx context.Context, in *ListFilterServiceRequest, opts ...grpc.CallOption) (*ListFilterServiceReply, error) {
	out := new(ListFilterServiceReply)
	err := c.cc.Invoke(ctx, "/api.filter.service.v1.FilterService/ListFilterService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FilterServiceServer is the server API for FilterService service.
// All implementations must embed UnimplementedFilterServiceServer
// for forward compatibility
type FilterServiceServer interface {
	CreateFilterService(context.Context, *CreateFilterServiceRequest) (*CreateFilterServiceReply, error)
	UpdateFilterService(context.Context, *UpdateFilterServiceRequest) (*UpdateFilterServiceReply, error)
	DeleteFilterService(context.Context, *DeleteFilterServiceRequest) (*DeleteFilterServiceReply, error)
	GetFilterService(context.Context, *GetFilterServiceRequest) (*GetFilterServiceReply, error)
	ListFilterService(context.Context, *ListFilterServiceRequest) (*ListFilterServiceReply, error)
	mustEmbedUnimplementedFilterServiceServer()
}

// UnimplementedFilterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFilterServiceServer struct {
}

func (UnimplementedFilterServiceServer) CreateFilterService(context.Context, *CreateFilterServiceRequest) (*CreateFilterServiceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFilterService not implemented")
}
func (UnimplementedFilterServiceServer) UpdateFilterService(context.Context, *UpdateFilterServiceRequest) (*UpdateFilterServiceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFilterService not implemented")
}
func (UnimplementedFilterServiceServer) DeleteFilterService(context.Context, *DeleteFilterServiceRequest) (*DeleteFilterServiceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFilterService not implemented")
}
func (UnimplementedFilterServiceServer) GetFilterService(context.Context, *GetFilterServiceRequest) (*GetFilterServiceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilterService not implemented")
}
func (UnimplementedFilterServiceServer) ListFilterService(context.Context, *ListFilterServiceRequest) (*ListFilterServiceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFilterService not implemented")
}
func (UnimplementedFilterServiceServer) mustEmbedUnimplementedFilterServiceServer() {}

// UnsafeFilterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FilterServiceServer will
// result in compilation errors.
type UnsafeFilterServiceServer interface {
	mustEmbedUnimplementedFilterServiceServer()
}

func RegisterFilterServiceServer(s grpc.ServiceRegistrar, srv FilterServiceServer) {
	s.RegisterService(&FilterService_ServiceDesc, srv)
}

func _FilterService_CreateFilterService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFilterServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilterServiceServer).CreateFilterService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.filter.service.v1.FilterService/CreateFilterService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilterServiceServer).CreateFilterService(ctx, req.(*CreateFilterServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilterService_UpdateFilterService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFilterServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilterServiceServer).UpdateFilterService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.filter.service.v1.FilterService/UpdateFilterService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilterServiceServer).UpdateFilterService(ctx, req.(*UpdateFilterServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilterService_DeleteFilterService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFilterServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilterServiceServer).DeleteFilterService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.filter.service.v1.FilterService/DeleteFilterService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilterServiceServer).DeleteFilterService(ctx, req.(*DeleteFilterServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilterService_GetFilterService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFilterServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilterServiceServer).GetFilterService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.filter.service.v1.FilterService/GetFilterService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilterServiceServer).GetFilterService(ctx, req.(*GetFilterServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FilterService_ListFilterService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFilterServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilterServiceServer).ListFilterService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.filter.service.v1.FilterService/ListFilterService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilterServiceServer).ListFilterService(ctx, req.(*ListFilterServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FilterService_ServiceDesc is the grpc.ServiceDesc for FilterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FilterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.filter.service.v1.FilterService",
	HandlerType: (*FilterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFilterService",
			Handler:    _FilterService_CreateFilterService_Handler,
		},
		{
			MethodName: "UpdateFilterService",
			Handler:    _FilterService_UpdateFilterService_Handler,
		},
		{
			MethodName: "DeleteFilterService",
			Handler:    _FilterService_DeleteFilterService_Handler,
		},
		{
			MethodName: "GetFilterService",
			Handler:    _FilterService_GetFilterService_Handler,
		},
		{
			MethodName: "ListFilterService",
			Handler:    _FilterService_ListFilterService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/filterService/v1/filterService.proto",
}
