// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CommentJobClient is the client API for CommentJob service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommentJobClient interface {
	CreateCommentJob(ctx context.Context, in *CreateCommentJobRequest, opts ...grpc.CallOption) (*CreateCommentJobReply, error)
	UpdateCommentJob(ctx context.Context, in *UpdateCommentJobRequest, opts ...grpc.CallOption) (*UpdateCommentJobReply, error)
	DeleteCommentJob(ctx context.Context, in *DeleteCommentJobRequest, opts ...grpc.CallOption) (*DeleteCommentJobReply, error)
	GetCommentJob(ctx context.Context, in *GetCommentJobRequest, opts ...grpc.CallOption) (*GetCommentJobReply, error)
	ListCommentJob(ctx context.Context, in *ListCommentJobRequest, opts ...grpc.CallOption) (*ListCommentJobReply, error)
}

type commentJobClient struct {
	cc grpc.ClientConnInterface
}

func NewCommentJobClient(cc grpc.ClientConnInterface) CommentJobClient {
	return &commentJobClient{cc}
}

func (c *commentJobClient) CreateCommentJob(ctx context.Context, in *CreateCommentJobRequest, opts ...grpc.CallOption) (*CreateCommentJobReply, error) {
	out := new(CreateCommentJobReply)
	err := c.cc.Invoke(ctx, "/api.commentJob.v1.CommentJob/CreateCommentJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentJobClient) UpdateCommentJob(ctx context.Context, in *UpdateCommentJobRequest, opts ...grpc.CallOption) (*UpdateCommentJobReply, error) {
	out := new(UpdateCommentJobReply)
	err := c.cc.Invoke(ctx, "/api.commentJob.v1.CommentJob/UpdateCommentJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentJobClient) DeleteCommentJob(ctx context.Context, in *DeleteCommentJobRequest, opts ...grpc.CallOption) (*DeleteCommentJobReply, error) {
	out := new(DeleteCommentJobReply)
	err := c.cc.Invoke(ctx, "/api.commentJob.v1.CommentJob/DeleteCommentJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentJobClient) GetCommentJob(ctx context.Context, in *GetCommentJobRequest, opts ...grpc.CallOption) (*GetCommentJobReply, error) {
	out := new(GetCommentJobReply)
	err := c.cc.Invoke(ctx, "/api.commentJob.v1.CommentJob/GetCommentJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentJobClient) ListCommentJob(ctx context.Context, in *ListCommentJobRequest, opts ...grpc.CallOption) (*ListCommentJobReply, error) {
	out := new(ListCommentJobReply)
	err := c.cc.Invoke(ctx, "/api.commentJob.v1.CommentJob/ListCommentJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommentJobServer is the server API for CommentJob service.
// All implementations must embed UnimplementedCommentJobServer
// for forward compatibility
type CommentJobServer interface {
	CreateCommentJob(context.Context, *CreateCommentJobRequest) (*CreateCommentJobReply, error)
	UpdateCommentJob(context.Context, *UpdateCommentJobRequest) (*UpdateCommentJobReply, error)
	DeleteCommentJob(context.Context, *DeleteCommentJobRequest) (*DeleteCommentJobReply, error)
	GetCommentJob(context.Context, *GetCommentJobRequest) (*GetCommentJobReply, error)
	ListCommentJob(context.Context, *ListCommentJobRequest) (*ListCommentJobReply, error)
	mustEmbedUnimplementedCommentJobServer()
}

// UnimplementedCommentJobServer must be embedded to have forward compatible implementations.
type UnimplementedCommentJobServer struct {
}

func (UnimplementedCommentJobServer) CreateCommentJob(context.Context, *CreateCommentJobRequest) (*CreateCommentJobReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCommentJob not implemented")
}
func (UnimplementedCommentJobServer) UpdateCommentJob(context.Context, *UpdateCommentJobRequest) (*UpdateCommentJobReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCommentJob not implemented")
}
func (UnimplementedCommentJobServer) DeleteCommentJob(context.Context, *DeleteCommentJobRequest) (*DeleteCommentJobReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCommentJob not implemented")
}
func (UnimplementedCommentJobServer) GetCommentJob(context.Context, *GetCommentJobRequest) (*GetCommentJobReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentJob not implemented")
}
func (UnimplementedCommentJobServer) ListCommentJob(context.Context, *ListCommentJobRequest) (*ListCommentJobReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCommentJob not implemented")
}
func (UnimplementedCommentJobServer) mustEmbedUnimplementedCommentJobServer() {}

// UnsafeCommentJobServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommentJobServer will
// result in compilation errors.
type UnsafeCommentJobServer interface {
	mustEmbedUnimplementedCommentJobServer()
}

func RegisterCommentJobServer(s grpc.ServiceRegistrar, srv CommentJobServer) {
	s.RegisterService(&CommentJob_ServiceDesc, srv)
}

func _CommentJob_CreateCommentJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommentJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentJobServer).CreateCommentJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.commentJob.v1.CommentJob/CreateCommentJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentJobServer).CreateCommentJob(ctx, req.(*CreateCommentJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentJob_UpdateCommentJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCommentJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentJobServer).UpdateCommentJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.commentJob.v1.CommentJob/UpdateCommentJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentJobServer).UpdateCommentJob(ctx, req.(*UpdateCommentJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentJob_DeleteCommentJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommentJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentJobServer).DeleteCommentJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.commentJob.v1.CommentJob/DeleteCommentJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentJobServer).DeleteCommentJob(ctx, req.(*DeleteCommentJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentJob_GetCommentJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentJobServer).GetCommentJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.commentJob.v1.CommentJob/GetCommentJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentJobServer).GetCommentJob(ctx, req.(*GetCommentJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentJob_ListCommentJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommentJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentJobServer).ListCommentJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.commentJob.v1.CommentJob/ListCommentJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentJobServer).ListCommentJob(ctx, req.(*ListCommentJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CommentJob_ServiceDesc is the grpc.ServiceDesc for CommentJob service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommentJob_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.commentJob.v1.CommentJob",
	HandlerType: (*CommentJobServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCommentJob",
			Handler:    _CommentJob_CreateCommentJob_Handler,
		},
		{
			MethodName: "UpdateCommentJob",
			Handler:    _CommentJob_UpdateCommentJob_Handler,
		},
		{
			MethodName: "DeleteCommentJob",
			Handler:    _CommentJob_DeleteCommentJob_Handler,
		},
		{
			MethodName: "GetCommentJob",
			Handler:    _CommentJob_GetCommentJob_Handler,
		},
		{
			MethodName: "ListCommentJob",
			Handler:    _CommentJob_ListCommentJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/commentJob/v1/commentJob.proto",
}
